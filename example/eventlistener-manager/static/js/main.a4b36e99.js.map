{"version":3,"file":"static/js/main.a4b36e99.js","mappings":"+BAEaA,IAAAC,EAAN,MAAMC,EA4BT,iBAAeC,GAAiC,QAAAC,EAAAC,UAAAC,OAAnBC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GACzB,OAAOP,EAAUQ,QAAQC,SAAQC,GAAU,CACvCA,EAASL,EAAQM,KAAK,IACtBD,EAASL,EAAQO,KAAIC,GAAUb,EAAUc,WAAWD,KAASF,KAAK,MAE1E,CAEA,iBAAeG,CAAWT,GACtB,OAAOA,EAAOU,QAAQ,WAAWL,GAAKA,EAAEM,eAC5C,CAEA,UAAOC,CAAIZ,EAAqBK,GAC5B,IAAMG,EAAQb,EAAUkB,qBAAqBR,GAE7C,GAAIG,GACA,IAAK,IAAIM,KAAQN,EACb,GAAK,KAAOM,KAASd,EACjB,OAAOc,OAAA,GAGP,KAAOT,KAASL,EACxB,OAAOK,CAIf,IApDeF,QAAU,CAAC,GAAI,SAAU,MAAO,KAAM,KAAM,IAAK,KAEhET,EAAOmB,qBAAkD,CACrDE,MAAS,CAAC,QAAS,aAAc,kBACjCC,kBAAqBrB,EAAUC,WAAW,UAAW,OAAQ,UAC7DqB,iBAAoBtB,EAAUC,WAAW,UAAW,OAAQ,SAC5DsB,cAAiBvB,EAAUC,WAAW,UAAW,UACjDuB,YAAexB,EAAUC,WAAW,UAAW,QAC/CwB,aAAgBzB,EAAUC,WAAW,UAAW,SAChDyB,YAAe1B,EAAUC,WAAW,UAAW,QAC/C0B,WAAc3B,EAAUC,WAAW,UAAW,OAC9C2B,YAAe5B,EAAUC,WAAW,UAAW,QAC/C4B,UAAa7B,EAAUC,WAAW,UAAW,MAC7C6B,mBAAsB9B,EAAUC,WAAW,OAAQ,UAAW,WAC9D8B,kBAAqB/B,EAAUC,WAAW,MAAO,UAAW,WAC5D+B,iBAAoBhC,EAAUC,WAAW,aAAc,UACvDgC,gBAAmBjC,EAAUC,WAAW,aAAc,SACtDiC,gBAAmBlC,EAAUC,WAAW,aAAc,SACtDkC,cAAiBnC,EAAUC,WAAW,aAAc,OACpDmC,cAAiBpC,EAAUC,WAAW,aAAc,OACpDoC,iBAAoBrC,EAAUC,WAAW,aAAc,UACvDqC,eAAkBtC,EAAUC,WAAW,YAAa,SACpDsC,mBAAsBvC,EAAUC,WAAW,YAAa,aACxDuC,aAAgBxC,EAAUC,WAAW,YAAa,OAClDwC,gBAAmBzC,EAAUC,WAAW,YAAa,WACzDF,GAuES2C,IAAAC,EAAN,MAAM3C,EAUT,uCAAO4C,GACH,OAAI5C,EAAwB6C,mCAA2C7C,EAAwB8C,cAE/F9C,EAAwB6C,oCAAqC,EAC7DE,SAASC,iBAAiB,YAAahD,EAAwBiD,eAAgB,CAACC,SAAS,IACzFH,SAASC,iBAAiB,aAAchD,EAAwBiD,eAAgB,CAACC,SAAS,IAEnF,IAAIC,SAAQC,UACf,IAAM1C,EAAqCqC,SAASM,iBAAkC,yBAEtF,GAAqB,IAAjB3C,EAAMN,OAAc,CACpB,IAAMS,EAAwBkC,SAASO,cAAc,QACrDzC,EAAK0C,aAAa,OAAQ,YAC1B1C,EAAK0C,aAAa,UAAW,oBAE7BR,SAASS,KAAKC,OAAO5C,GACrBb,EAAwB0D,KAAKC,IAAI9C,EAAM,CAAC,EAC5C,CAEAH,EACKkD,SAAQ/C,IACL,IAAMM,EAAUN,EAAKgD,aAAa,WAClC,GAAI1C,EAAS,CACT,IAAM2C,EAAa9D,EAAwB+D,qBAAqB5C,GAEhEnB,EAAwB0D,KAAKC,IAAI9C,EAAMiD,GACvCA,EAAW,iBAAmB,KAC9BjD,EAAK0C,aAAa,UAAWvD,EAAwBgE,oBAAoBF,GAC7E,KAGRG,WAAW5D,EACf,IACJ,CAEA,yCAAO6D,GACElE,EAAwB6C,qCAE7B7C,EAAwB6C,oCAAqC,EAC7DE,SAASoB,oBAAoB,YAAanE,EAAwBiD,gBAClEF,SAASoB,oBAAoB,aAAcnE,EAAwBiD,gBAEnEF,SAASM,iBAAkC,yBACtCO,SAAQvD,IACL,GAAIL,EAAwB0D,KAAKU,IAAI/D,GAAO,CACxC,IAAMK,EAAUV,EAAwB0D,KAAKzC,IAAIZ,GAEb,IAAhCgE,OAAOC,KAAK5D,GAASN,OACrBC,EAAKkE,SAELlE,EAAKkD,aAAa,UAAWvD,EAAwBgE,oBAAoBtD,GAEjF,KAEZ,CAEA,qCAAO8D,GACH,OAAIxE,EAAwByE,iCAAyCzE,EAAwB8C,cAE7F9C,EAAwByE,kCAAmC,EAEpD,IAAItB,SAAQ9C,IACf0C,SAASC,iBAAiB,aAAchD,EAAwBiD,eAAgB,CAACC,SAAS,IAC1Fe,WAAW5D,EACf,IACJ,CAEA,uCAAOqE,GACE1E,EAAwByE,mCAE7BzE,EAAwByE,kCAAmC,EAE3D1B,SAASoB,oBAAoB,aAAcnE,EAAwBiD,gBACvE,CAEA,wCAAO0B,GACH,OAAI3E,EAAwB4E,oCAA4C5E,EAAwB8C,cAEhG9C,EAAwB4E,qCAAsC,EAC9D7B,SAASC,iBAAiB,aAAchD,EAAwBiD,eAAgB,CAACC,SAAS,IAEnF,IAAIC,SAAQ9C,IACfL,EAAwB6E,gBAAgBC,WAAW,4LACnDb,WAAW5D,EACf,IACJ,CAEA,0CAAO0E,GACH,GAAK/E,EAAwB4E,oCAE7B,CAAA5E,EAAwB4E,qCAAsC,EAC9D7B,SAASoB,oBAAoB,aAAcnE,EAAwBiD,gBAEnE,IACIjD,EAAwB6E,gBAAgBG,WAAW,EACvD,CAAE,MACF,EACJ,CAEA,oBAAeH,GACX,IAAK7E,EAAwBiF,WAAY,CACrC,IAAM5E,EAA0B0C,SAASO,cAAc,SACvDP,SAASS,KAAKC,OAAOpD,GACrBL,EAAwBiF,WAAa5E,EAAM6E,KAC/C,CAEA,OAAOlF,EAAwBiF,UACnC,CAEA,2BAAelB,CAAqB1D,GAChC,OAAOA,EACF8E,MAAM,KACNvE,KAAIF,IACD,IAAMG,EAAKH,EAAQ0E,OAAOD,MAAM,KAChC,MAAO,CAAC,CAACtE,EAAG,IAAKA,EAAG,GACxB,IACCwE,QAAO,CAAC3E,EAAMG,IAASwD,OAAOiB,OAAO5E,EAAMG,IAAO,CAAC,EAC5D,CAEA,0BAAemD,CAAoB3D,GAC/B,OAAOgE,OAAOC,KAAKjE,GACdO,KAAIF,GAAOA,EAAM,IAAML,EAAWK,KAClCC,KAAK,KACd,IAnIe+C,KAAqD,IAAI6B,QACxE5C,EAAeE,oCAAqC,EACpDF,EAAe8B,kCAAmC,EAClD9B,EAAeiC,qCAAsC,EACrDjC,EAAeM,eAAkB5C,GAAiBA,EAAM4C,iBACxDN,EAAeG,aAAe,IAAIK,SAAQ,SACzCR,GCAQ6C,EAAgE,CApCzEC,oBAAuB,iBACvBC,mBAAsB,iBACtBC,kBAAqB,iBACrBC,oBAAuB,iBAEvBC,cAAiB,WACjBC,aAAgB,WAChBC,aAAgB,WAChBC,cAAiB,WACjBC,WAAc,WACdC,aAAgB,WAChBC,YAAe,WACfC,cAAiB,WAIjBC,oBAAuB,iBACvBC,mBAAsB,iBACtBC,kBAAqB,iBACrBC,qBAAwB,iBAExBC,cAAiB,WACjBC,aAAgB,WAChBC,aAAgB,WAChBC,cAAiB,WACjBC,WAAc,WACdC,aAAgB,WAChBC,YAAe,WACfC,eAAkB,WAElBC,gBAAmB,aACnBC,eAAkB,aAClBC,cAAiB,aACjBC,iBAAoB,cCxGXC,IAAAC,EAAN,MAAMtH,EAWT,oBAAOuH,CAAclH,GACjB,OAAIA,GAAU,GAAKA,GAAU,GAAWL,EAAcwH,EAClDnH,EAAS,IAAMA,GAAU,IAAYL,EAAcyH,EACnDpH,EAAS,KAAOA,GAAU,KAC1BA,IAAW,KAAOA,IAAW,IAAYL,EAAc0H,EACvDrH,GAAU,KAAOA,IAAW,GAAWL,EAAc2H,EACrDtH,GAAU,IAAMA,IAAW,EAAUL,EAAcwH,EAEhDxH,EAAc4H,OACzB,CAEA,oBAAOC,CAAcxH,GACjB,OAAIA,GAAU,GAAKA,GAAU,KAAaL,EAAcwH,EACpDnH,EAAS,MAAQA,GAAU,KAAaL,EAAc8H,GACtDzH,EAAS,MAAQA,GAAU,MAAcL,EAAcyH,EACvDpH,EAAS,OAASA,GAAU,MAAcL,EAAc+H,GACxD1H,EAAS,OAASA,GAAU,KAC5BA,IAAW,KAAOA,IAAW,MAAcL,EAAc0H,EACzDrH,GAAU,OAASA,IAAW,MAAcL,EAAcgI,GAC1D3H,GAAU,OAASA,IAAW,KAAaL,EAAc2H,EACzDtH,GAAU,MAAQA,IAAW,KAAaL,EAAciI,GACxD5H,GAAU,MAAQA,IAAW,EAAUL,EAAcwH,EAElDxH,EAAc4H,OACzB,IAlCOD,EAAM,EACbL,EAAOW,GAAO,EACdX,EAAOE,EAAM,EACbF,EAAOQ,GAAO,EACdR,EAAOG,EAAM,EACbH,EAAOS,GAAO,EACdT,EAAOI,EAAM,EACbJ,EAAOU,GAAO,EACdV,EAAOM,SAAa,EAADN,GA6BVY,EAAN,MAAMlI,EAKTmI,WAAAA,GACIC,KAAKpI,EAAIqI,OAAOC,YAAYC,MAE5B,IAAM7H,EAAAP,UAAAC,QAAA,OAAAoI,EAAArI,UAAA,GACAU,EAAAV,UAAAC,QAAA,OAAAoI,EAAArI,UAAA,GAEFO,aAAgB+H,YAChBL,KAAKM,EAAIhI,EAAKiI,QACdP,KAAKQ,EAAIlI,EAAKmI,SACPnI,aAAgBoI,YAA8B,iBAATjI,GAAqBH,EAAKqI,QAAQ3I,OAASS,GACvFuH,KAAKM,EAAIhI,EAAKqI,QAAQlI,GAAM8H,QAC5BP,KAAKQ,EAAIlI,EAAKqI,QAAQlI,GAAMgI,SACL,iBAATnI,GAAqC,iBAATG,GAC1CuH,KAAKM,EAAIhI,EACT0H,KAAKQ,EAAI/H,IAETuH,KAAKM,EAAIM,IACTZ,KAAKQ,EAAII,IAEjB,CAEA,qBAAOC,CAAe5I,GAClB,OAAO,IAAIL,EAAcK,EAC7B,CAEA,qBAAO6I,CAAe7I,GAClB,OAAO,IAAIL,EAAcK,EADOF,UAAAC,OAAA,QAAAoI,IAAArI,UAAA,GAAAA,UAAA,GAAY,EAEhD,CAEA,qBAAOgJ,CAAe9I,EAAWK,GAC7B,OAAO,IAAIV,EAAcK,EAAGK,EAChC,CAEA,aAAO0I,CAAO/I,EAAmBK,GAC7B,OAAO,IAAIV,GAAeK,EAAGqI,EAAIhI,EAAGgI,GAAK,GAAIrI,EAAGuI,EAAIlI,EAAGkI,GAAK,EAChE,CAEAS,QAAAA,CAAShJ,GACL,IAAMK,EAAK0H,KAAKM,EAAIrI,EAAGqI,EACjB7H,EAAKuH,KAAKQ,EAAIvI,EAAGuI,EACvB,OAAOU,KAAKC,KAAK7I,EAAKA,EAAKG,EAAKA,EACpC,CAEA2I,QAAAA,CAASnJ,GACL,OAAOiJ,KAAKG,IAAIrB,KAAKpI,EAAIK,EAAGL,EAChC,GAGS0J,EAAN,MAaHvB,WAAAA,CAAY9H,EAAmBK,GAC3B0H,KAAKuB,MAAQtJ,EACb+H,KAAKwB,IAAMlJ,EACX0H,KAAKgB,OAASlB,EAAckB,OAAO/I,EAAIK,GACvC0H,KAAKyB,GAAKnJ,EAAGgI,EAAIrI,EAAGqI,EACpBN,KAAK0B,GAAKpJ,EAAGkI,EAAIvI,EAAGuI,EACpBR,KAAKiB,SAAW3I,EAAG2I,SAAShJ,GAC5B+H,KAAK2B,KAAOrJ,EAAGV,EAAIK,EAAGL,EACtBoI,KAAK4B,MAAQ5B,KAAKiB,SAAWjB,KAAK2B,KAClC3B,KAAK6B,OAASX,KAAKY,MAAM9B,KAAK0B,GAAI1B,KAAKyB,IACvCzB,KAAK+B,OAAS/B,KAAK6B,QAAU,IAAMX,KAAKc,IACxChC,KAAKiC,UAAYhD,EAAcQ,cAAcO,KAAK+B,OACtD,CAEAG,MAAAA,CAAOjK,GACH,OAAO+H,KAAKuB,MAAMjB,IAAMrI,EAAMsJ,MAAMjB,GAAKN,KAAKwB,IAAIlB,IAAMrI,EAAMuJ,IAAIlB,GAAKN,KAAKuB,MAAMf,IAAMvI,EAAMsJ,MAAMf,GAAKR,KAAKwB,IAAIhB,IAAMvI,EAAMuJ,IAAIhB,CACtI,GAGS2B,EAAN,cAA4BjK,MAI/B6H,WAAAA,CAAY9H,GACRmK,QACInK,EAAMD,OAAS,IACfgI,KAAKqC,QAAQpK,GACb+H,KAAKsC,MAAQrK,EAAM,GACnB+H,KAAKuC,KAAOtK,EAAM+H,KAAKhI,OAAS,GAExC,CAEAwK,IAAAA,CAAKvK,GACD,GAAI+H,KAAKhI,OAASC,EACd,OAAO+H,KAAK/H,EAGpB,CAEQwK,KAAAA,CAAMxK,EAAeK,GACzB,GAAIL,EAAQ,EACR,OAGJ,IAAMQ,EAAQuH,KAAKwC,KAAKvK,GAClBc,EAAQiH,KAAKwC,KAAKvK,EAAQ,GAEhC,GAAIQ,GAASM,EAAO,CAChB,IAAM2C,EAASjD,EAAMH,GACfoK,EAAS3J,EAAMT,GAErB,GAAIoD,aAAkBoE,GAAiB4C,aAAkB5C,EACrD,OAAO,IAAIwB,EAAU5F,EAAQgH,EAErC,CAEJ,CAEQC,OAAAA,CAAQ1K,EAAeK,GAC3B,GAAIL,EAAQ,EACR,OAGJ,IAAMQ,EAAQuH,KAAKwC,KAAKvK,GAClBc,EAAQiH,KAAKwC,KAAKvK,EAAQ,GAEhC,GAAIQ,GAASM,EAAO,CAChB,IAAM2C,EAASjD,EAAMH,GACfoK,EAAS3J,EAAMT,GAErB,GAAsB,iBAAXoD,GAAyC,iBAAXgH,EACrC,OAAOA,EAAShH,CAExB,CAEJ,CAEAkH,MAAAA,CAAO3K,GACH,OAAO+H,KAAKyC,MAAMxK,EAAO,QAC7B,CAEA4K,IAAAA,CAAK5K,GACD,OAAO+H,KAAKyC,MAAMxK,EAAO,MAC7B,CAEA6K,OAAAA,CAAQ7K,GACJ,OAAO+H,KAAKyC,MAAMxK,EAAO,SAC7B,CAEA8K,SAAAA,CAAU9K,GACN,OAAO+H,KAAK2C,QAAQ1K,EAAO,WAC/B,CAEA+K,OAAAA,CAAQ/K,GACJ,OAAO+H,KAAK2C,QAAQ1K,EAAO,SAC/B,CAEAgL,OAAAA,CAAQhL,GACJ,OAAO+H,KAAK2C,QAAQ1K,EAAO,SAC/B,GCzMEiL,EAAN,MACI,YAAOC,CAA2BlL,GAC9B,OAAOgE,OAAOiB,OAAO,CAAC,EAAGjF,EAC7B,GAGSqI,EAAN,cAAiCD,WAGpCN,WAAAA,CAAY9H,EAAcK,GAAuC,IAAzBG,EAAAV,UAAAC,OAAA,QAAAoI,IAAArI,UAAA,GAAAA,UAAA,GAAqB,GACzDqK,MAAMnK,EAAMiL,EAAeC,MAAM7K,IACjC0H,KAAKoD,MAAQ,IAAIjB,EAAc1J,EACnC,GAGS+H,EAAN,cAAiCE,WAGpCX,WAAAA,CAAY9H,EAAcK,GAAuC,IAAzBG,EAAAV,UAAAC,OAAA,QAAAoI,IAAArI,UAAA,GAAAA,UAAA,GAAqB,GACzDqK,MAAMnK,EAAMiL,EAAeC,MAAM7K,IACjC0H,KAAKoD,MAAQ,IAAIjB,EAAc1J,EACnC,GACJ,MChBI,UAAWwH,OAAW,YAAsBA,OAAOS,WAAe,IAAa,CAC3E,MAAM9I,UAAmByL,QACrBtD,WAAAA,CAAYzH,EAAcG,GACtB2J,MAAM9J,EAAMG,EAChB,EAGHwH,OAAeS,WAAa9I,CACjC,CACH,EDOD,GCJA,IAAM0L,EAAY,IJsCX,MAMHvD,WAAAA,CAAY9H,GALZ,KAAQsL,kBAA4B,EAEpC,KAAQC,cAAqC,KAC7C,KAAQC,MAAuB,KAG3BzD,KAAK0D,eAAiBzL,CAC1B,CAEA0L,YAAAA,CAAa1L,GACWgI,OAAOC,YAAYC,MAErBH,KAAKuD,mBAAqBvD,KAAK0D,gBAC1B,OAAf1D,KAAKyD,QACLxD,OAAO2D,qBAAqB5D,KAAKyD,OACjCzD,KAAKyD,MAAQ,MAEjBzD,KAAK6D,YAAY5L,KAEjB+H,KAAKwD,cAAgBvL,EACF,OAAf+H,KAAKyD,QACLzD,KAAKyD,MAAQxD,OAAO6D,uBAAsB,IAAM9D,KAAK+D,sBAGjE,CAEQF,WAAAA,CAAY5L,GAChB+H,KAAKuD,kBAAoBtD,OAAOC,YAAYC,MAC5ClI,GACJ,CAEQ8L,gBAAAA,GACA/D,KAAKwD,gBACLxD,KAAK6D,YAAY7D,KAAKwD,eACtBxD,KAAKwD,cAAgB,KACrBxD,KAAKyD,MAAQ,KAErB,GI5EgC,GAEvBO,GAAAC,EAAN,MAAMrM,EAiBT,UAAOsM,CAAIjM,EAAqBK,EAA+BG,EAA8CM,GACzG,IAAK,IAAM2C,KAAQ9D,EAAauM,QAAQ7L,GAAQ,CAC5C,GAAMV,EAAawM,iBAAiB1I,GAChC9D,EAAayM,yBAAyBpM,EAAQK,EAAOG,OAClD,CAEH,IADkBf,EAAUmB,IAAIZ,EAAQyD,GAEpC,SAEJzD,EAAO2C,iBAAiBc,EAAMjD,EAAUM,EAC5C,CAEAnB,EAAa0M,mBAAmBrM,EAAQyD,EAAMjD,EAClD,CACJ,CAEA,uBAAe2L,CAAiBnM,GAC5B,OAAOmF,EAAiBnF,EAC5B,CAEA,+BAAeoM,CAAyBpM,EAAqBK,EAA+BG,GACxF,IAAK,IAAMM,KAAQnB,EAAauM,QAAQ7L,GAGpC,OAFAL,EAAO2C,iBAAiB7B,EAAMN,GAEtBb,EAAawM,iBAAiBrL,IAClC,IAAK,iBACDnB,EAAa2M,uBAAuBtM,GACpC,MACJ,IAAK,WACDL,EAAa4M,iBAAiBvM,GAC9B,MACJ,IAAK,iBACDL,EAAa6M,uBAAuBxM,GACpC,MACJ,IAAK,WACDL,EAAa8M,iBAAiBzM,GAC9B,MACJ,IAAK,aACDL,EAAa+M,mBAAmB1M,GAIhD,CAEA,aAAOkE,CAAOlE,EAAqBK,EAAgCG,GAC/D,IAAMM,EAAmBnB,EAAagN,SAASC,qBAAqBhM,IAAIZ,GAExE,GAAKc,EAEL,GAAIT,EACAV,EAAakN,4BAA4B7M,EAAQK,EAAOG,OACrD,CACH,IAAMiD,EAAO3C,EAAiBmD,OAC1BwG,EAAMhH,EAAKqJ,OAEf,MAAQrC,EAAIsC,MAAM,CACd,IAAMC,EAAQvC,EAAIwC,MAClBtN,EAAakN,4BAA4B7M,EAAQgN,EAAOxM,GACxDiK,EAAMhH,EAAKqJ,MACf,CACJ,CACJ,CAEA,kCAAeD,CAA4B7M,EAAqBK,EAA+BG,GAC3F,IAAMM,EAAmBnB,EAAagN,SAASC,qBAAqBhM,IAAIZ,GAExE,GAAKc,EAEL,IAAK,IAAM2C,KAAQ9D,EAAauM,QAAQ7L,GAAQ,CAC5C,IAAMoK,EAAM,GACNuC,EAAYlM,EAAiBF,IAAI6C,GAEvC,GAAIuJ,EAAW,CACX,IAAK,IAAME,KAAYF,EAAW,CAC9B,IAAMG,EAAKxN,EAAayN,uBAAuBpN,EAAQyD,EAAMjD,EAAY0M,GACrEC,GACA1C,EAAIL,KAAK+C,EAEjB,CAEA,IAAK,IAAMD,KAAMzC,EACbuC,EAAUK,OAAOL,EAAUM,QAAQJ,GAAK,GAGnB,IAArBF,EAAUjN,QACVe,EAAiByM,OAAOlN,EAEhC,CAE8B,IAA1BS,EAAiB0M,MACjB7N,EAAagN,SAASC,qBAAqBW,OAAOvN,GAGtD,IAAMqH,EAAmB1H,EAAawM,iBAAiB1I,GACvD,GAAI4D,EAAkB,CAClB,IAAM6F,EAAOpM,EAAiBmD,OAC1BkJ,EAAMD,EAAKJ,OACXW,GAAsB,EAE1BzN,EAAM,MAAQmN,EAAIJ,MAAM,CACpB,IAAMW,EAAQP,EAAIF,MAClB,IAAK,IAAMU,KAAQhO,EAAauM,QAAQwB,GACpC,GAAIrG,IAAqB1H,EAAawM,iBAAiBwB,GAAO,CAC1DF,GAAsB,EACtB,MAAMzN,CACV,CAEJmN,EAAMD,EAAKJ,MACf,CAEIW,GACA9N,EAAaiO,oBAAoB5N,EAAQqH,EAEjD,CACJ,CACJ,CAEA,6BAAe+F,CAAuBpN,EAAqBK,EAA0CG,EAA4DM,GAC7J,IAAKN,GAAcA,IAAeM,EAC9B,OAAOnB,EAAakO,uBAAuB7N,EAAQK,EAAOS,EAGlE,CAEA,6BAAe+M,CAAuB7N,EAAqBK,EAA0CG,GAA8F,IAAAsN,EAC/L,OAAA9N,EAAO8D,oBAAoBzD,EAAOG,GACmB,QADXsN,EAC1CnO,EAAagN,SAASC,qBAAqBhM,IAAIZ,UAAM,IAAA8N,GAArDA,EAAwDP,OAAOlN,GACxDG,CACX,CAEA,yBAAe6L,CAAmBrM,EAAqBK,EAA+BG,GAClF,IAAMM,EAAY,IAAInB,EAAaoO,uBAAuB/N,EAAQK,GAAQG,GAE1Eb,EAAaqO,iCAAiChO,GAAQsD,IAAIjD,EAAOS,EACrE,CAEA,6BAAeiN,CAAuB/N,EAAqBK,GACvD,IAAMG,EAAmBb,EAAaqO,iCAAiChO,GACjEc,EAAYN,EAAiBI,IAAIP,GAEvC,GAAIS,EACA,OAAOA,EACJ,CACH,IAAM2C,EAAiD,GACvD,OAAAjD,EAAiB8C,IAAIjD,EAAOoD,GAErBA,CACX,CACJ,CAEA,uCAAeuK,CAAiChO,GAC5C,IAAMK,EAAmBV,EAAagN,SAASC,qBAAqBhM,IAAIZ,GAExE,GAAIK,EACA,OAAOA,EACJ,CACH,IAAMG,EAAS,IAAIyN,IACnB,OAAAtO,EAAagN,SAASC,qBAAqBtJ,IAAItD,EAAQQ,GAEhDA,CACX,CACJ,CAEA,uBAAe0N,CAAiBlO,GAC5B,OAAOL,EAAagN,SAASwB,sBAAsBvN,IAAIZ,EAC3D,CAEA,uBAAeoO,CAAiBpO,EAAqBK,EAAkCG,GACnF,IAAMM,EAAiBnB,EAAauO,iBAAiBlO,IAAW,CAAC,EACjEL,EAAagN,SAASwB,sBAAsB7K,IAAItD,EAAQ,IAAIc,EAAgB,CAACT,GAAgBG,GACjG,CAEA,qCAAe6N,CAA+BrO,EAAqBK,GAA2C,IAAAiO,EAC1G,QAA6C,QAArCA,EAAC3O,EAAauO,iBAAiBlO,UAAM,IAAAsO,IAApCA,EAAwCjO,GACrD,CAEA,0BAAeuN,CAAoB5N,EAAqBK,GACpD,IAAMG,EAAmBb,EAAauO,iBAAiBlO,GAEvD,GAAIQ,EAAkB,CAClB,IAAMM,EAAiBN,EAAiBH,GACxC,GAAIS,EACA,IAAK,IAAM2C,KAAQ3C,EAAgB,CAC/B,IAAM2J,EAAY3J,EAAe2C,GACjC,GAAIgH,EACA,IAAK,IAAMuC,KAAYvC,EACnBzK,EAAO8D,oBAAoBL,EAAMuJ,EAG7C,QAEGxM,EAAiBH,GAEqB,IAAzC2D,OAAOC,KAAKzD,GAAkBT,QAC9BJ,EAAagN,SAASwB,sBAAsBZ,OAAOvN,EAE3D,CACJ,CAEA,6BAAesM,CAAuBtM,GAClC,IAAKL,EAAa0O,+BAA+BrO,EAAQ,kBAAmB,CACxE,IAAIK,EACAG,EACAM,GAAc,EAEZ2C,EAAQ8K,KACVvO,EAAO8D,oBAAoB,YAAaqJ,GACxCnN,EAAO8D,oBAAoB,UAAWkJ,GACtChN,EAAO8D,oBAAoB,aAAcuD,GACrC7G,GAASwH,OAAOwG,aAAahO,EACrC,EAEMiK,EAAegD,IACjB3M,GAAc,EACdT,EAAoBwH,EAAce,eAAe6E,GACjDhK,IACAzD,EAAO2C,iBAAiB,YAAawK,EAAa,CAACtK,SAAS,IAE5DrC,EAAUwH,OAAOpE,YAAW,KACxB5D,EAAOyO,cAAc,IAAIpG,EAAmB,sBAAuBoF,IACnEzN,EAAO8D,oBAAoB,UAAWL,GACtCzD,EAAO8D,oBAAoB,aAAcL,GACzCzD,EAAO2C,iBAAiB,UAAWqK,EAAW,CAACnK,SAAS,IACxD7C,EAAO2C,iBAAiB,aAAc0E,EAAc,CAACxE,SAAS,GAClE,GAAGlD,EAAa+O,QAAQC,2BAC5B,EAEM3B,EAAaS,IACXpN,GACAL,EAAOyO,cAAc,IAAIpG,EAAmB,oBAAqBoF,EAAO,CAAC,IAAIpE,EAAUhJ,EAAmBwH,EAAce,eAAe6E,OAE3IhK,GACJ,EAEM4D,EAAgBoG,IACdpN,GACAL,EAAOyO,cAAc,IAAIpG,EAAmB,sBAAuBoF,EAAO,CAAC,IAAIpE,EAAUhJ,EAAmBwH,EAAce,eAAe6E,OAE7IhK,GACJ,EAEMyJ,EAAoB0B,KACtB9N,GAAc,CAClB,EAEMqM,EAAeM,IACjB,GAAK3M,GAKL,GAAIT,EAAmB,CACnB,IAAMqN,EAAoB7F,EAAce,eAAe6E,GAEnDpN,EAAkB8I,SAASuE,GAAqB/N,EAAa+O,QAAQC,4BAA8BtO,EAAkB2I,SAAS0E,GAAqB/N,EAAa+O,QAAQG,4BACxKpL,IACOpD,EAAkB8I,SAASuE,IAAsB/N,EAAa+O,QAAQC,6BACzEhP,EAAa+O,QAAQI,OACrB9O,EAAOyO,cAAc,IAAIpG,EAAmB,qBAAsBoF,EAAO,CAAC,IAAIpE,EAAUhJ,EAAoBqN,MAE5GrC,EAAUK,cAAa,KACf5K,GACAd,EAAOyO,cAAc,IAAIpG,EAAmB,qBAAsBoF,EAAO,CAAC,IAAIpE,EAAUhJ,EAAoBqN,KAEpH,IAGZ,OApBIjK,GAoBJ,EAGJzD,EAAO2C,iBAAiB,YAAa8H,EAAa,CAAC5H,SAAS,IAC5D7C,EAAO2C,iBAAiB,UAAWc,EAAO,CAACZ,SAAS,IACpD7C,EAAO2C,iBAAiB,aAAcc,EAAO,CAACZ,SAAS,IACvD7C,EAAO2C,iBAAiB,UAAWuK,EAAmB,CAACrK,SAAS,IAChE7C,EAAO2C,iBAAiB,aAAcuK,EAAmB,CAACrK,SAAS,IAEnElD,EAAayO,iBAAiBpO,EAAQ,iBAAkB,CACpD+O,UAAa,CAACtE,GACduE,QAAW,CAAChC,EAAWE,EAAmBzJ,GAC1CwL,WAAc,CAACjC,EAAWE,EAAmBzJ,GAC7CyL,UAAa,CAAC/B,IAEtB,CACJ,CAEA,uBAAeZ,CAAiBvM,GAC5B,IAAKL,EAAa0O,+BAA+BrO,EAAQ,YAAa,CAClE,IAAIK,EACAG,EACAM,EAA4B,GAC5B2C,GAAkB,EAClBgH,GAAc,EAEZuC,EAAQuB,KACVzN,EAAe,GACf2C,GAAkB,EAClBzD,EAAO8D,oBAAoB,YAAa6J,GACxC3N,EAAO8D,oBAAoB,UAAWoJ,GACtClN,EAAO8D,oBAAoB,aAAcqJ,EAC7C,EAEM9F,EAAe8H,IACjB1E,GAAc,EACdpK,EAAoBwH,EAAce,eAAeuG,GACjD3O,EAAmBH,EACnB2M,IACAhN,EAAO2C,iBAAiB,YAAagL,EAAa,CAAC9K,SAAS,IAC5D7C,EAAO2C,iBAAiB,UAAWuK,EAAW,CAACrK,SAAS,IACxD7C,EAAO2C,iBAAiB,aAAcwK,EAAc,CAACtK,SAAS,GAClE,EAEMqK,EAAaiC,IACX1L,GAAmBpD,IACnBqN,EAAeyB,GACfnP,EAAOyO,cAAc,IAAIpG,EAAmB,cAAe8G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAmBwH,EAAce,eAAeuG,QAErInC,GACJ,EAEMG,EAAgBgC,IACd1L,GAAmBpD,IACnBqN,EAAeyB,GACfnP,EAAOyO,cAAc,IAAIpG,EAAmB,gBAAiB8G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAmBwH,EAAce,eAAeuG,QAEvInC,GACJ,EAEMS,EAAoBmB,KACtBnE,GAAc,CAClB,EAEMiD,EAAkByB,IACpB,GAAI9O,EAAmB,CACnB,IACI+O,EADAC,EAAkB,GAEtB,IAAK,IAAMC,KAAQxO,EAAc,CACxBsO,IACDA,EAAWE,EAAKhG,OAGpB,IAAMiG,EAAU,IAAIlG,EAAU+F,EAAUE,EAAK/F,KACzCgG,EAAQvG,UAAY,KACpBqG,EAAgBjF,KAAKmF,GACrBH,EAAW,KAEnB,CAEA,IAAMI,EAAa,IAAIC,IAAIJ,EAAgB9O,KAAI+O,GAAQtI,EAAcE,cAAcoI,EAAKxF,WAExF,GAAwB,IAApB0F,EAAWhC,KAAY,CACvB,IAAI8B,EAEAE,EAAWzL,IAAI,GACfuL,EAAO,aACAE,EAAWzL,IAAI,GACtBuL,EAAO,gBACAE,EAAWzL,IAAI,GACtBuL,EAAO,eACAE,EAAWzL,IAAI,KACtBuL,EAAO,gBAGPA,GACAtP,EAAOyO,cAAc,IAAIpG,EAAmBiH,EAAMH,EAAOE,GAEjE,CACJ,GAGE1B,EAAewB,IACjB,GAAI3O,GAAoBH,EAAmB,CAEvC,IAAMgP,EAAoBxH,EAAce,eAAeuG,GACjDC,EAAO,IAAI/F,EAAU7I,EAAkB6O,GACvCG,EAAS1O,EAAaf,OAE5BS,EAAmB6O,EAEJ,IAAXG,GAAgBJ,EAAKpG,SAAW,GAChChJ,EAAOyO,cAAc,IAAIpG,EAAmB,gBAAiB8G,EAAOrO,IAGpEsO,EAAKpG,SAAW,IAChBvF,GAAkB,EAClB3C,EAAasJ,KAAKgF,GAEdzP,EAAa+O,QAAQI,OACrB9O,EAAOyO,cAAc,IAAIpG,EAAmB,eAAgB8G,EAAOrO,IAEnEuK,EAAUK,cAAa,KACfjB,GACAzK,EAAOyO,cAAc,IAAIpG,EAAmB,eAAgB8G,EAAOrO,GAE3E,IAGZ,GAGJd,EAAO2C,iBAAiB,YAAa0E,EAAa,CAACxE,SAAS,IAC5D7C,EAAO2C,iBAAiB,UAAW8K,EAAmB,CAAC5K,SAAS,IAChE7C,EAAO2C,iBAAiB,aAAc8K,EAAmB,CAAC5K,SAAS,IAEnElD,EAAayO,iBAAiBpO,EAAQ,WAAY,CAC9C+O,UAAa,CAAC1H,GACd2H,QAAW,CAAC9B,EAAWO,GACvBwB,WAAc,CAAC9B,EAAcM,GAC7ByB,UAAa,CAACvB,IAEtB,CACJ,CAEA,6BAAenB,CAAuBxM,GAClC,IAAKL,EAAa0O,+BAA+BrO,EAAQ,kBAAmB,CACxE,IAAIK,EACAG,EACAM,EACA2C,GAAkB,EAClBgH,GAAc,EAEZuC,EAAQuB,KACV9K,GAAkB,EAClBzD,EAAO8D,oBAAoB,YAAa4J,GACxC1N,EAAO8D,oBAAoB,WAAYoJ,GACvClN,EAAO8D,oBAAoB,cAAeqJ,GACtCrM,GAASkH,OAAOwG,aAAa1N,EACrC,EAEMuG,EAAgB8H,IACdA,aAAiB1G,YAAuC,IAAzB0G,EAAMzG,QAAQ3I,OAC7CsC,EAAwBiC,oCAAoCoL,MAAK,KAC7DjF,GAAc,EACdpK,EAAqBwH,EAAcgB,eAAesG,EAAO,GACzD3O,EAAmBH,EACnB2M,IACAhN,EAAO2C,iBAAiB,YAAa+K,EAAa,CAAC7K,SAAS,IAE5D/B,EAAUkH,OAAOpE,YAAW,KACpB6G,IACAhH,GAAkB,EAClBzD,EAAOyO,cAAc,IAAIlG,EAAmB,sBAAuB4G,IACnEnP,EAAO8D,oBAAoB,WAAYkJ,GACvChN,EAAO8D,oBAAoB,cAAekJ,GAC1ChN,EAAO2C,iBAAiB,WAAYuK,EAAY,CAACrK,SAAS,IAC1D7C,EAAO2C,iBAAiB,cAAewK,EAAe,CAACtK,SAAS,IAExE,GAAGlD,EAAa+O,QAAQiB,2BAC5B,IACOlM,EACP0J,EAAcgC,GAEdnC,GAER,EAEME,EAAciC,IACZ9O,GAAsBG,GACtBR,EAAOyO,cAAc,IAAIlG,EAAmB,oBAAqB4G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAoBG,MAE/GwM,GACJ,EAEMG,EAAiBgC,IACf9O,GAAsBG,GACtBR,EAAOyO,cAAc,IAAIlG,EAAmB,uBAAwB4G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAoBG,MAElHwM,GACJ,EAEMS,EAAoBmC,KACtBnF,GAAc,EACdpI,EAAwBqC,qCAC5B,EAEMgJ,EAAeyB,IACjB,GAAIA,aAAiB1G,YAAuC,IAAzB0G,EAAMzG,QAAQ3I,OAAc,CAC3D,IAAK0K,EAED,YADAuC,IAIJ,GAAI3M,EAAoB,CACpB,IAAMgP,EAAoBxH,EAAcgB,eAAesG,EAAO,GAE9D,GAAI9O,EAAmB8I,SAASkG,GAAqB1P,EAAa+O,QAAQiB,4BAA8BtP,EAAmB2I,SAASqG,GAAqB1P,EAAa+O,QAAQmB,4BAC1K7C,SAAM,GACC3M,EAAmB8I,SAASkG,IAAsB1P,EAAa+O,QAAQiB,4BAA8BnP,EAAkB,CAC9H,IAAM4O,EAAoBvH,EAAcgB,eAAesG,EAAO,GACjD,IAAI9F,EAAU7I,EAAkB4O,GAEpCpG,SAAW,IACZrJ,EAAa+O,QAAQI,OACrB9O,EAAOyO,cAAc,IAAIlG,EAAmB,qBAAsB4G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAqB+O,MAE7G/D,EAAUK,cAAa,KACfjB,GACAzK,EAAOyO,cAAc,IAAIlG,EAAmB,qBAAsB4G,EAAO,CAAC,IAAI9F,EAAUhJ,EAAqB+O,KAErH,IAGZ,CAEA5O,EAAmB6O,CACvB,CACJ,GAGE1B,EAAkBwB,GAAiBA,EAAMvM,iBAE/C5C,EAAO2C,iBAAiB,cAAegL,EAAgB,CAAC9K,SAAS,IACjE7C,EAAO2C,iBAAiB,aAAc0E,EAAc,CAACxE,SAAS,IAC9D7C,EAAO2C,iBAAiB,WAAYqK,EAAO,CAACnK,SAAS,IACrD7C,EAAO2C,iBAAiB,cAAeqK,EAAO,CAACnK,SAAS,IACxD7C,EAAO2C,iBAAiB,WAAY8K,EAAmB,CAAC5K,SAAS,IACjE7C,EAAO2C,iBAAiB,cAAe8K,EAAmB,CAAC5K,SAAS,IAEpElD,EAAayO,iBAAiBpO,EAAQ,iBAAkB,CACpD8P,YAAe,CAACnC,GAChBoC,WAAc,CAAC1I,GACf2I,SAAY,CAAC9C,EAAYO,EAAmBT,GAC5CiD,YAAe,CAAC9C,EAAeM,EAAmBT,GAClDkD,UAAa,CAACxC,IAEtB,CACJ,CAEA,uBAAejB,CAAiBzM,GAC5B,IAAKL,EAAa0O,+BAA+BrO,EAAQ,YAAa,CAClE,IAAIK,EACAG,EACAM,EAA4B,GAC5B2C,GAAkB,EAClBgH,GAAc,EAEZuC,EAAQuB,KACVzN,EAAe,GACf2C,GAAkB,EAClBzD,EAAO8D,oBAAoB,YAAa6J,GACxC3N,EAAO8D,oBAAoB,WAAYoJ,GACvClN,EAAO8D,oBAAoB,cAAeqJ,EAC9C,EAEM9F,EAAgBgI,IACdA,aAAiB5G,YAAuC,IAAzB4G,EAAM3G,QAAQ3I,OAC7CsC,EAAwB8B,iCAAiCuL,MAAK,KAC1DjF,GAAc,EACdpK,EAAqBwH,EAAcgB,eAAewG,EAAO,GACzD7O,EAAmBH,EACnB2M,IACAhN,EAAO2C,iBAAiB,YAAagL,EAAa,CAAC9K,SAAS,IAC5D7C,EAAO2C,iBAAiB,WAAYuK,EAAY,CAACrK,SAAS,IAC1D7C,EAAO2C,iBAAiB,cAAewK,EAAe,CAACtK,SAAS,GACpE,IACOY,GACP0J,EAAckC,EAEtB,EAEMnC,EAAcmC,IACZ5L,GAAmBpD,GAAsBG,IACzCkN,EAAe2B,GACfrP,EAAOyO,cAAc,IAAIlG,EAAmB,cAAe8G,EAAO,CAAC,IAAIhG,EAAUhJ,EAAoBG,OAEzGwM,GACJ,EAEMG,EAAiBkC,IACf5L,GAAmBpD,GAAsBG,GACzCR,EAAOyO,cAAc,IAAIlG,EAAmB,iBAAkB8G,EAAO,CAAC,IAAIhG,EAAUhJ,EAAoBG,MAE5GwM,GACJ,EAEMS,EAAoBmC,KACtBnF,GAAc,EACdpI,EAAwBgC,kCAC5B,EAEMqJ,EAAkB2B,IACpB,GAAIhP,EAAoB,CACpB,IACImP,EADAJ,EAAkB,GAEtB,IAAK,IAAMG,KAAQzO,EAAc,CACxB0O,IACDA,EAAWD,EAAKjG,OAGpB,IAAMlC,EAAU,IAAIiC,EAAUmG,EAAUD,EAAKhG,KACzCnC,EAAQ4B,UAAY,KACpBoG,EAAgBhF,KAAKhD,GACrBoI,EAAW,KAEnB,CAEA,IAAMF,EAAa,IAAIG,IAAIL,EAAgB7O,KAAIgP,GAAQvI,EAAcE,cAAcqI,EAAKzF,WAExF,GAAwB,IAApBwF,EAAW9B,KAAY,CACvB,IAAI+B,EAEAD,EAAWvL,IAAI,GACfwL,EAAO,aACAD,EAAWvL,IAAI,GACtBwL,EAAO,gBACAD,EAAWvL,IAAI,GACtBwL,EAAO,eACAD,EAAWvL,IAAI,KACtBwL,EAAO,gBAGPA,GACAvP,EAAOyO,cAAc,IAAIpG,EAAmBkH,EAAMF,EAAOD,GAEjE,CACJ,GAGEzB,EAAe0B,IACjB,GAAIA,aAAiB5G,YAAuC,IAAzB4G,EAAM3G,QAAQ3I,QACzCS,GAAoBH,EAAoB,CACxC,IAAM+O,EAAoBvH,EAAcgB,eAAewG,EAAO,GACxDG,EAAO,IAAInG,EAAU7I,EAAkB4O,GACvCE,EAASxO,EAAaf,OAE5BS,EAAmB4O,EAEJ,IAAXE,GAAgBE,EAAKxG,SAAW,GAChChJ,EAAOyO,cAAc,IAAIlG,EAAmB,gBAAiB8G,EAAOvO,IAGpE0O,EAAKxG,SAAW,IAChBvF,GAAkB,EAClB3C,EAAasJ,KAAKoF,GAEd7P,EAAa+O,QAAQI,OACrB9O,EAAOyO,cAAc,IAAIlG,EAAmB,eAAgB8G,EAAOvO,IAEnEuK,EAAUK,cAAa,KACfjB,GACAzK,EAAOyO,cAAc,IAAIlG,EAAmB,eAAgB8G,EAAOvO,GAE3E,IAGZ,GAIFqO,EAAkBE,GAAiBA,EAAMzM,iBAE/C5C,EAAO2C,iBAAiB,cAAewM,EAAgB,CAACtM,SAAS,IACjE7C,EAAO2C,iBAAiB,aAAc0E,EAAc,CAACxE,SAAS,IAC9D7C,EAAO2C,iBAAiB,WAAY8K,EAAmB,CAAC5K,SAAS,IACjE7C,EAAO2C,iBAAiB,cAAe8K,EAAmB,CAAC5K,SAAS,IAEpElD,EAAayO,iBAAiBpO,EAAQ,WAAY,CAC9C8P,YAAe,CAACX,GAChBY,WAAc,CAAC1I,GACf2I,SAAY,CAAC9C,EAAYO,GACzBwC,YAAe,CAAC9C,EAAeM,GAC/ByC,UAAa,CAACvC,IAEtB,CACJ,CAEA,yBAAejB,CAAmB1M,GAC9B,IAAKL,EAAa0O,+BAA+BrO,EAAQ,cAAe,CACpE,IACIQ,EADAH,EAAsC,GAEtCS,EAAoC,GACpC2C,EAA8B,GAC9BgH,GAAkB,EAClBuC,GAAc,EAEZ3F,EAAQkH,KACVlO,EAAqB,GACrBS,EAAmB,GACnB2C,EAAiB,GACjBgH,GAAkB,EAClBzK,EAAO8D,oBAAoB,YAAa6J,GACxC3N,EAAO8D,oBAAoB,WAAYqJ,GACvCnN,EAAO8D,oBAAoB,cAAe2J,GAC1CpL,EAAwBwB,oCAC5B,EAEMqJ,EAAgBmC,IACdA,aAAiB5G,YAAc4G,EAAM3G,QAAQ3I,OAAS,GACtDsC,EAAwBE,mCAAmCmN,MAAK,KAC5D,IAAMN,EAAcC,EAAM3G,QAAQ3I,OAElCiN,GAAc,EACd3F,IAEA,IAAK,IAAImI,EAAI,EAAGA,EAAIJ,EAAaI,IAC7BnP,EAAmB+J,KAAKvC,EAAcgB,eAAewG,EAAOG,IAEhE1O,EAAmBT,EACnBG,EAAiB,IAAI6I,EAAUhJ,EAAmB,GAAIA,EAAmB,IACzEL,EAAO2C,iBAAiB,YAAagL,EAAa,CAAC9K,SAAS,IAC5D7C,EAAO2C,iBAAiB,WAAYwK,EAAY,CAACtK,SAAS,IAC1D7C,EAAO2C,iBAAiB,cAAe8K,EAAe,CAAC5K,SAAS,GACpE,GAER,EAEMsK,EAAckC,IACZ5E,GAAmBpK,GAAsBS,GACzCd,EAAOyO,cAAc,IAAIlG,EAAmB,gBAAiB8G,EAAO,CAAC,IAAIhG,EAAUxB,EAAckB,OAAO1I,EAAmB,GAAIA,EAAmB,IAAKwH,EAAckB,OAAOjI,EAAiB,GAAIA,EAAiB,QAEtNuG,GACJ,EAEMoG,EAAiB4B,IACf5E,GAAmBpK,GAAsBS,GACzCd,EAAOyO,cAAc,IAAIlG,EAAmB,mBAAoB8G,EAAO,CAAC,IAAIhG,EAAUxB,EAAckB,OAAO1I,EAAmB,GAAIA,EAAmB,IAAKwH,EAAckB,OAAOjI,EAAiB,GAAIA,EAAiB,QAEzNuG,GACJ,EAEMqG,EAAoBkC,KACtB5C,GAAc,EACd3K,EAAwBwB,oCAC5B,EAEM8J,EAAe0B,IACjB,GAAIvO,EAAiBf,OAAS,GAAKM,EAAmBN,OAAS,GAAKS,GAAkB6O,aAAiB5G,YAAc4G,EAAM3G,QAAQ3I,OAAS,EAAG,CAC3I,IAAMqP,EAAcC,EAAM3G,QAAQ3I,OAC5ByP,EAAoB,GACpBF,EAAQ,GACRC,EAAS9L,EAAe1D,OAE9B,IAAK,IAAIoQ,EAAI,EAAGA,EAAIf,EAAae,IAAK,CAClC,IAAMC,EAAWvI,EAAcgB,eAAewG,EAAOc,GACrDX,EAAkBpF,KAAKgG,GACvBd,EAAMlF,KAAK,IAAIf,EAAU+G,EAAUZ,EAAkBW,IACzD,CAEA,IAAM/I,EAAO,IAAIiC,EAAUmG,EAAkB,GAAIA,EAAkB,IAEnE1O,EAAmB0O,EAEJ,IAAXD,IAAiB/O,EAAeyJ,OAAO7C,IACvCpH,EAAOyO,cAAc,IAAIlG,EAAmB,kBAAmB8G,EAAO5L,KAGzD,IAAX8L,IAAgB/O,EAAeyJ,OAAO7C,OAAYmI,EAAS,GAAK9L,EAAe8L,EAAS,GAAGtF,OAAO7C,MACpGqD,GAAkB,EAClBhH,EAAe2G,KAAKhD,GAEhBzH,EAAa+O,QAAQI,OACrB9O,EAAOyO,cAAc,IAAIlG,EAAmB,iBAAkB8G,EAAO5L,IAErE4H,EAAUK,cAAa,KACfsB,GACAhN,EAAOyO,cAAc,IAAIlG,EAAmB,iBAAkB8G,EAAO5L,GAE7E,IAGZ,GAGE0L,EAAkBE,GAAiBA,EAAMzM,iBAE/C5C,EAAO2C,iBAAiB,cAAewM,EAAgB,CAACtM,SAAS,IACjE7C,EAAO2C,iBAAiB,aAAcuK,EAAc,CAACrK,SAAS,IAC9D7C,EAAO2C,iBAAiB,WAAY+K,EAAmB,CAAC7K,SAAS,IACjE7C,EAAO2C,iBAAiB,cAAe+K,EAAmB,CAAC7K,SAAS,IAEpElD,EAAayO,iBAAiBpO,EAAQ,aAAc,CAChD8P,YAAe,CAACX,GAChBY,WAAc,CAAC7C,GACf8C,SAAY,CAAC7C,EAAYO,GACzBuC,YAAe,CAACxC,EAAeC,GAC/BwC,UAAa,CAACvC,IAEtB,CACJ,CAEA,cAAezB,CAAWlM,GACtB,OAAOC,MAAMoQ,QAAQrQ,GAASA,EAAQ,CAACA,EAC3C,GA7xBAgM,EAAOW,SAAiC,CACpCC,qBAAsB,IAAI1H,QAC1BiJ,sBAAuB,IAAIjJ,SAG/B8G,EAAO0C,QAAU,CACbI,QAAQ,EACRH,2BAA4B,IAC5BE,4BAA6B,GAC7Bc,2BAA4B,IAC5BE,4BAA6B,IAGjC7D,EAAOsE,kBAAmB,EAC1BtE,EAAOuE,eAAgB,EAAAvE,IAgxB3B,WAGI,IACI,IAAMrM,EAAQ6Q,OAGRxQ,EAAUgE,OAAOyM,OAAO,CAAC,EAAG,CAC9B5N,QAAS,CACLjC,GAAAA,GACImL,EAAauE,kBAAmB,CAEpC,GAEJI,KAAM,CACF9P,GAAAA,GACImL,EAAawE,eAAgB,CAEjC,KAGRvI,OAAOrF,iBAAiB,OAAQhD,EAAOK,GACvCgI,OAAOlE,oBAAoB,OAAQnE,EAAOK,EAC9C,CAAE,MACF,CACH,CAzBD,GA2BCgI,OAAe2I,aAAe5E,EAC9B/D,OAAe4I,mBAAqBvI,EACpCL,OAAe6I,mBAAqBtI,EACpCP,OAAe8I,cAAgB9J,EAC/BgB,OAAe+I,cAAgBlJ,EAC/BG,OAAegJ,UAAY3H,EAC3BrB,OAAeiJ,cAAgB/G,ECl1BhC,IAAIgH,EAAuBxO,SAASyO,cAAc,YAClD,MAAMC,EAAmB1O,SAASyO,cAAc,gBAC1CE,EAA0B3O,SAASyO,cAAc,wBACjDG,EAAmB5O,SAASyO,cAAc,gBAE1CnE,EAAI,CACNvH,aAAc,KACdC,aAAc,KACdC,cAAe,KACfC,WAAY,KACZC,aAAc,KACdC,YAAa,KACbC,cAAe,KACfV,mBAAoB,KACpBC,kBAAmB,KACnBC,oBAAqB,MACrBc,aAAc,KACdC,aAAc,KACdC,cAAe,KACfC,WAAY,KACZC,aAAc,KACdC,YAAa,KACb6K,cAAe,KACftL,mBAAoB,KACpBC,kBAAmB,KACnBsL,oBAAqB,MACrB5K,gBAAiB,MACjBC,eAAgB,MAChBC,cAAe,MACfC,iBAAkB,OAGhB0K,EAAWzR,IACb,MAAM0R,EAAuBN,EACvBO,EAAe3R,EAAE2R,KAEvB,GAAID,EAAQlO,aAAa,YAAcmO,EAAM,CAAC,IAADC,EACzC,MAAMC,EAAmCH,EAAQ1O,iBAAiB,OAC5D8O,EAAsBD,EAAKA,EAAK9R,OAAS,GACzCgS,EAAcC,SAAgC,QAAxBJ,EAACE,EAAItO,aAAa,cAAM,IAAAoO,EAAAA,EAAI,KAExDE,EAAIG,UAAYN,EAAO,KAAOI,EAAM,GACpCD,EAAI5O,aAAa,MAAOgP,OAAOH,EAAM,GACzC,MACIL,EAAQO,WAAa,QAAUN,EAAO,SACtCD,EAAQxO,aAAa,SAAUyO,GAGnC,GAAI3R,aAAa6Q,GAAsB7Q,aAAa4Q,EAAoB,CACpE,MAAMuB,EAAOjB,EAAQkB,wBACfpL,EAAIqL,WAAWC,iBAAiBpB,GAASqB,aACzCC,EAAKL,EAAKM,MAAQ,EAAIzL,EACtB0L,EAAKP,EAAKQ,OAAS,EAAI3L,EACvB4L,EAAa5S,EAAE2R,KAErB,GAAW,iBAAPiB,GAAgC,iBAAPA,EAAuB,CAChD,MAAM5F,EAAI,QAAS,IAAI6F,MAAOC,UAC9BzB,EAAW0B,UAAU9G,IAAIe,GACzBpJ,YAAW,IAAMyN,EAAW0B,UAAU7O,OAAO8I,IAAI,IACrD,CAEA,GAAW,kBAAP4F,GAAiC,kBAAPA,EAAwB,CAClD,MAAM5F,EAAI,SAAU,IAAI6F,MAAOC,UAC/BzB,EAAW0B,UAAU9G,IAAIe,GACzBpJ,YAAW,IAAMyN,EAAW0B,UAAU7O,OAAO8I,IAAI,IACrD,CAEA,GAAW,eAAP4F,GAA8B,eAAPA,EAAqB,CAC5C,MAAM5F,EAAI,MAAO,IAAI6F,MAAOC,UAC5BzB,EAAW0B,UAAU9G,IAAIe,GACzBpJ,YAAW,IAAMyN,EAAW0B,UAAU7O,OAAO8I,IAAI,IACrD,CAEA,GAAW,iBAAP4F,GAAgC,iBAAPA,EAAuB,CAChD,MAAM5F,EAAI,QAAS,IAAI6F,MAAOC,UAC9BzB,EAAW0B,UAAU9G,IAAIe,GACzBpJ,YAAW,IAAMyN,EAAW0B,UAAU7O,OAAO8I,IAAI,IACrD,CASA,GAPW,wBAAP4F,GAAuC,wBAAPA,GAChCvB,EAAW0B,UAAU9G,IAAI,aAElB,sBAAP2G,GAAqC,wBAAPA,GAAuC,sBAAPA,GAAqC,yBAAPA,GAC5FvB,EAAW0B,UAAU7O,OAAO,aAGrB,iBAAP0O,GAAgC,iBAAPA,EAAuB,CAChD,MAAMtI,EAAOtK,EAAEmL,MAAMb,KACjBA,IACA+G,EAAW2B,MAAMC,KAAOhK,KAAKiK,IAAIV,EAAIvJ,KAAKkK,IAAI,EAAId,WAAWC,iBAAiBjB,GAAY4B,MAAQ3I,EAAKd,KAAQ,KAC/G6H,EAAW2B,MAAMI,IAAMnK,KAAKiK,IAAIR,EAAIzJ,KAAKkK,IAAI,EAAId,WAAWC,iBAAiBjB,GAAY+B,KAAO9I,EAAKb,KAAQ,KAErH,CAEA,GAAW,mBAAPmJ,EAAyB,CACzB,MAAMlF,EAAI1N,EAAEmL,MAAMd,MACZxC,EAAI7H,EAAEmL,MAAMb,KAClB,GAAIoD,GAAK7F,EAAG,CAAC,IAADwL,EAAAC,EACR,MAAMC,EAAyE,QAApEF,EAAGf,iBAAiBjB,GAAYmC,UAAUC,MAAM,4BAAoB,IAAAJ,GAAgB,QAAhBC,EAAjED,EAAoE,GAAGvO,MAAM,YAAI,IAAAwO,OAAhB,EAAjEA,EAAoF,GAAGvO,OACrG,GAAIwO,EAAO,CACP,MAAM/S,EAAIyI,KAAKiK,IAAI,EAAGjK,KAAKkK,IAAI,IAAMd,WAAWkB,IAAW1L,EAAEmB,SAAW0E,EAAE1E,SAAY,GAAK,IAC3FqI,EAAW2B,MAAMQ,UAAY,UAAYhT,EAAI,WAAaA,EAAI,aAClE,CACJ,CAEA,MAAMqK,EAAU7K,EAAEmL,MAAMN,QAAQ7K,EAAEmL,MAAMpL,OAAS,GAE7C8K,IACAwG,EAAW2B,MAAMC,KAAOhK,KAAKiK,IAAIV,EAAIvJ,KAAKkK,IAAI,EAAId,WAAWC,iBAAiBjB,GAAY4B,MAAQpI,EAAQrB,KAAQ,KAClH6H,EAAW2B,MAAMI,IAAMnK,KAAKiK,IAAIR,EAAIzJ,KAAKkK,IAAI,EAAId,WAAWC,iBAAiBjB,GAAY+B,KAAOvI,EAAQpB,KAAQ,MAGpH,MAAMuB,EAAUhL,EAAEmL,MAAMH,QAAQhL,EAAEmL,MAAMpL,OAAS,GAEjD,GAAIiL,EAAS,CAAC,IAAD0I,EACT,MAAMC,EAAuD,QAApDD,EAAGpC,EAAI0B,MAAMQ,UAAUC,MAAM,+BAAuB,IAAAC,OAAA,EAAjDA,EAAoD,GAChEpC,EAAI0B,MAAMQ,UAAY,WAAaI,OAAOD,GAAY,GAAK3I,GAAW,MAC1E,CACJ,CACA,MAAM6I,EAAK1B,EAAK9J,EACVyL,EAAK3B,EAAK5J,GAENqK,EAAGmB,SAAS,QAAU/T,EAAEmL,MAAM6I,OAAO,GAAKhU,EAAEmL,OAEpD5H,SAAQ0Q,IACN,MAAMtC,EAAO3R,EAAE2R,KACTuC,EAAkBlH,EAAU2E,GAC5BwC,EAAOF,EAAKnK,QAAU,IAAMmK,EAAKnK,SAAW,GAAOmK,EAAKnK,QAAU,IAAMmK,EAAKnK,OAAS,IAAO,OAAS,QAEtGsK,EAAO1R,SAASO,cAAc,OAC9BoR,EAAO3R,SAASO,cAAc,OAC9BqR,EAAO5R,SAASO,cAAc,OAuBpC,GArBAmR,EAAKrB,UAAU9G,IAAI,QACnBmI,EAAKrB,UAAU9G,IAAIiI,GACnBE,EAAKrB,UAAU9G,IAAIkI,GACnBC,EAAKpB,MAAMC,KAAOhK,KAAKiK,IAAIe,EAAK3K,MAAMjB,EAAI,GAAI4L,EAAK1K,IAAIlB,EAAI,IAAMwL,EAAK,KACtEO,EAAKpB,MAAMI,IAAMnK,KAAKiK,IAAIe,EAAK3K,MAAMf,EAAI,GAAI0L,EAAK1K,IAAIhB,EAAI,IAAMuL,EAAK,KACrEM,EAAKpB,MAAMP,MAAQxJ,KAAKkK,IAAI,EAAGlK,KAAKG,IAAI6K,EAAKzK,KAAO,KACpD4K,EAAKpB,MAAML,OAAS1J,KAAKkK,IAAI,EAAGlK,KAAKG,IAAI6K,EAAKxK,KAAO,KACrD2K,EAAKG,GAAK,QAAU3B,EAEpByB,EAAKtB,UAAU9G,IAAI,OACnBoI,EAAKtB,UAAU9G,IAAIiI,GACnBG,EAAKrB,MAAMC,KAAOgB,EAAK3K,MAAMjB,EAAI,GAAKwL,EAAK,KAC3CQ,EAAKrB,MAAMI,IAAMa,EAAK3K,MAAMf,EAAI,GAAKuL,EAAK,KAC1CO,EAAKE,GAAK,QAAU3B,EAEpB0B,EAAKvB,UAAU9G,IAAI,OACnBqI,EAAKvB,UAAU9G,IAAIiI,GACnBI,EAAKtB,MAAMC,KAAOgB,EAAK1K,IAAIlB,EAAI,GAAKwL,EAAK,KACzCS,EAAKtB,MAAMI,IAAMa,EAAK1K,IAAIhB,EAAI,GAAKuL,EAAK,KACxCQ,EAAKC,GAAK,QAAU3B,EAET,mBAAPA,EAAyB,CACzB,MAAM4B,EAAS9R,SAASO,cAAc,OACtCuR,EAAOzB,UAAU9G,IAAI,UACrBuI,EAAOxB,MAAMC,KAAOgB,EAAKlL,OAAOV,EAAI,GAAKwL,EAAK,KAC9CW,EAAOxB,MAAMI,IAAMa,EAAKlL,OAAOR,EAAI,GAAKuL,EAAK,KAC7CU,EAAOxB,MAAMP,MAAQwB,EAAKjL,SAAW,EAAI,KACzCwL,EAAOxB,MAAML,OAASsB,EAAKjL,SAAW,EAAI,KAC1CwL,EAAOD,GAAK,UAAY3B,EACxB1B,EAAQuD,YAAYD,GAEpB5Q,YAAW,KACP4Q,EAAOtQ,QAAQ,GAChB,IACP,CAEAgN,EAAQuD,YAAYL,GACpBlD,EAAQuD,YAAYJ,GACpBnD,EAAQuD,YAAYH,GAGpB1Q,YAAW,KACPwQ,EAAKlQ,SACLmQ,EAAKnQ,SACLoQ,EAAKpQ,QAAQ,GACd0O,EAAGmB,SAAS,QAAU,IAAM,IAAK,GAE5C,CAEA3C,EAAIsD,UAAYtD,EAAIuD,YAAY,EAgI9BC,EAAiBlS,SAASyO,cAAgC,mBAC1D0D,EAAWnS,SAASyO,cAAgC,aACpD2D,EAAiBpS,SAASyO,cAAgC,mBAC1D4D,EAAWrS,SAASyO,cAAgC,aACpD6D,EAAatS,SAASyO,cAAgC,eACtDrC,EAASpM,SAASyO,cAAgC,WAExDyD,EAAeK,SAAWjV,IACRA,EAAEkV,OACNC,QAtIkBxE,EAAa1E,IACzCiF,EACA,CACI,sBACA,oBACA,qBACA,uBAEJO,EACA,CAAE5O,SAAS,IA2DoB8N,EAAazM,OAC5CgN,EACA,CACI,sBACA,oBACA,qBACA,uBAgEJ,EAGJ2D,EAASI,SAAWjV,IACFA,EAAEkV,OACNC,QAnIYxE,EAAa1E,IACnCiF,EACA,CACI,gBACA,eACA,eACA,gBACA,aACA,eACA,cACA,iBAEJO,EACA,CAAE5O,SAAS,IAqDc8N,EAAazM,OACtCgN,EACA,CACI,gBACA,eACA,eACA,gBACA,aACA,eACA,cACA,iBA2DJ,EAGJ4D,EAAeG,SAAWjV,IACRA,EAAEkV,OACNC,QA5HkBxE,EAAa1E,IACzCiF,EACA,CACI,sBACA,oBACA,qBACA,wBAEJO,EACA,CAAE5O,SAAS,IAuDoB8N,EAAazM,OAC5CgN,EACA,CACI,sBACA,oBACA,qBACA,wBA0DJ,EAGJ6D,EAASE,SAAWjV,IACFA,EAAEkV,OACNC,QAzHYxE,EAAa1E,IACnCiF,EACA,CACI,gBACA,eACA,eACA,gBACA,aACA,eACA,cACA,kBAEJO,EACA,CAAE5O,SAAS,IAiDc8N,EAAazM,OACtCgN,EACA,CACI,gBACA,eACA,eACA,gBACA,aACA,eACA,cACA,kBAqDJ,EAGJ8D,EAAWC,SAAWjV,IACJA,EAAEkV,OACNC,QAlHcxE,EAAa1E,IACrCiF,EACA,CACI,kBACA,iBACA,gBACA,oBAEJO,EACA,CAAE5O,SAAS,IAkDgB8N,EAAazM,OACxCgN,EACA,CACI,kBACA,iBACA,gBACA,oBAqDJ,EAGJpC,EAAOmG,SAAWjV,IACd,MAAMoV,EAAQpV,EAAEkV,OAChBvE,EAAajC,QAAQI,OAASsG,EAAMD,OAAO,EC3WdzS,SAAS2S,eAAe,O","sources":["../node_modules/eventlistener-manager/src/utils.ts","../node_modules/eventlistener-manager/src/interfacecs.ts","../node_modules/eventlistener-manager/src/geometry.ts","../node_modules/eventlistener-manager/src/event.ts","../node_modules/eventlistener-manager/src/index.ts","common/components/components/EventManager.ts","index.tsx"],"sourcesContent":["type ViewportContentMap = { [K: string]: string };\n\nexport class EventType {\n    private static vendors = ['', 'webkit', 'moz', 'ms', 'MS', 'o', 'O'];\n\n    static polyfillEventTypeMap: { [K: string]: string[] } = {\n        'wheel': ['wheel', 'mousewheel', 'DOMMouseScroll'],\n        'pointerlockchange': EventType.withVendor('pointer', 'lock', 'change'),\n        'pointerlockerror': EventType.withVendor('pointer', 'lock', 'error'),\n        'pointercancel': EventType.withVendor('pointer', 'cancel'),\n        'pointerdown': EventType.withVendor('pointer', 'down'),\n        'pointerhover': EventType.withVendor('pointer', 'hover'),\n        'pointermove': EventType.withVendor('pointer', 'move'),\n        'pointerout': EventType.withVendor('pointer', 'out'),\n        'pointerover': EventType.withVendor('pointer', 'over'),\n        'pointerup': EventType.withVendor('pointer', 'up'),\n        'lostpointercapture': EventType.withVendor('lost', 'pointer', 'capture'),\n        'gotpointercapture': EventType.withVendor('got', 'pointer', 'capture'),\n        'fullscreenchange': EventType.withVendor('fullscreen', 'change'),\n        'fullscreenerror': EventType.withVendor('fullscreen', 'error'),\n        'transitionstart': EventType.withVendor('transition', 'start'),\n        'transitionrun': EventType.withVendor('transition', 'run'),\n        'transitionend': EventType.withVendor('transition', 'end'),\n        'transitioncancel': EventType.withVendor('transition', 'cancel'),\n        'animationstart': EventType.withVendor('animation', 'start'),\n        'animationiteration': EventType.withVendor('animation', 'iteration'),\n        'animationend': EventType.withVendor('animation', 'end'),\n        'animationcancel': EventType.withVendor('animation', 'cancel')\n    }\n\n    private static withVendor(...strings: string[]) {\n        return EventType.vendors.flatMap(vendor => [\n            vendor + strings.join(''),\n            vendor + strings.map(string => EventType.capitalize(string)).join('')\n        ]);\n    }\n\n    private static capitalize(string: string) {\n        return string.replace(/\\b[a-z]/, s => s.toUpperCase());\n    }\n\n    static get(target: EventTarget, type: string) {\n        const types = EventType.polyfillEventTypeMap[type];\n\n        if (types) {\n            for (let type of types) {\n                if (('on' + type) in target) {\n                    return type;\n                }\n            }\n        } else if (('on' + type) in target) {\n            return type;\n        }\n\n        return;\n    }\n}\n\nexport class TaskScheduler {\n    private lastExecutionTime: number = 0;\n    private readonly delayThreshold: number;\n    private scheduledTask: (() => void) | null = null;\n    private rafId: number | null = null;\n\n    constructor(delayThreshold: number) {\n        this.delayThreshold = delayThreshold;\n    }\n\n    scheduleTask(task: () => void): void {\n        const currentTime = window.performance.now();\n\n        if (currentTime - this.lastExecutionTime >= this.delayThreshold) {\n            if (this.rafId !== null) {\n                window.cancelAnimationFrame(this.rafId);\n                this.rafId = null;\n            }\n            this.executeTask(task);\n        } else {\n            this.scheduledTask = task;\n            if (this.rafId === null) {\n                this.rafId = window.requestAnimationFrame(() => this.runScheduledTask());\n            }\n        }\n    }\n\n    private executeTask(task: () => void): void {\n        this.lastExecutionTime = window.performance.now();\n        task();\n    }\n\n    private runScheduledTask(): void {\n        if (this.scheduledTask) {\n            this.executeTask(this.scheduledTask);\n            this.scheduledTask = null;\n            this.rafId = null;\n        }\n    }\n}\n\nexport class DefaultGesturePreventer {\n    private static styleSheet: CSSStyleSheet;\n    private static meta: WeakMap<HTMLMetaElement, ViewportContentMap> = new WeakMap();\n    private static isActivePreventDefaultPinchGesture = false;\n    private static isActivePreventDefaultPanGesture = false;\n    private static isActivePreventDefaultSelectGesture = false;\n    private static preventDefault = (event: Event) => event.preventDefault();\n    private static emptyPromise = new Promise(() => {\n    });\n\n    static activePreventDefaultPinchGesture() {\n        if (DefaultGesturePreventer.isActivePreventDefaultPinchGesture) return DefaultGesturePreventer.emptyPromise;\n\n        DefaultGesturePreventer.isActivePreventDefaultPinchGesture = true;\n        document.addEventListener('touchmove', DefaultGesturePreventer.preventDefault, {passive: false});\n        document.addEventListener('touchstart', DefaultGesturePreventer.preventDefault, {passive: false});\n\n        return new Promise(async resolve => {\n            const metas: NodeListOf<HTMLMetaElement> = document.querySelectorAll<HTMLMetaElement>('meta[name=\"viewport\"]');\n\n            if (metas.length === 0) {\n                const meta: HTMLMetaElement = document.createElement('meta');\n                meta.setAttribute('name', 'viewport');\n                meta.setAttribute('content', 'user-scalable=no');\n\n                document.head.append(meta);\n                DefaultGesturePreventer.meta.set(meta, {});\n            }\n\n            metas\n                .forEach(meta => {\n                    const content = meta.getAttribute('content');\n                    if (content) {\n                        const contentMap = DefaultGesturePreventer.splitViewportContent(content);\n\n                        DefaultGesturePreventer.meta.set(meta, contentMap);\n                        contentMap['user-scalable'] = 'no';\n                        meta.setAttribute('content', DefaultGesturePreventer.joinViewportContent(contentMap));\n                    }\n                });\n\n            setTimeout(resolve);\n        });\n    }\n\n    static inactivePreventDefaultPinchGesture() {\n        if (!DefaultGesturePreventer.isActivePreventDefaultPinchGesture) return;\n\n        DefaultGesturePreventer.isActivePreventDefaultPinchGesture = false;\n        document.removeEventListener('touchmove', DefaultGesturePreventer.preventDefault);\n        document.removeEventListener('touchstart', DefaultGesturePreventer.preventDefault);\n\n        document.querySelectorAll<HTMLMetaElement>('meta[name=\"viewport\"]')\n            .forEach(meta => {\n                if (DefaultGesturePreventer.meta.has(meta)) {\n                    const content = DefaultGesturePreventer.meta.get(meta)!;\n\n                    if (Object.keys(content).length === 0) {\n                        meta.remove();\n                    } else {\n                        meta.setAttribute('content', DefaultGesturePreventer.joinViewportContent(content));\n                    }\n                }\n            });\n    }\n\n    static activePreventDefaultPanGesture() {\n        if (DefaultGesturePreventer.isActivePreventDefaultPanGesture) return DefaultGesturePreventer.emptyPromise;\n\n        DefaultGesturePreventer.isActivePreventDefaultPanGesture = true;\n\n        return new Promise(resolve => {\n            document.addEventListener('touchstart', DefaultGesturePreventer.preventDefault, {passive: false});\n            setTimeout(resolve);\n        });\n    }\n\n    static inactivePreventDefaultPanGesture() {\n        if (!DefaultGesturePreventer.isActivePreventDefaultPanGesture) return;\n\n        DefaultGesturePreventer.isActivePreventDefaultPanGesture = false;\n\n        document.removeEventListener('touchstart', DefaultGesturePreventer.preventDefault);\n    }\n\n    static activePreventDefaultSelectGesture() {\n        if (DefaultGesturePreventer.isActivePreventDefaultSelectGesture) return DefaultGesturePreventer.emptyPromise;\n\n        DefaultGesturePreventer.isActivePreventDefaultSelectGesture = true;\n        document.addEventListener('touchstart', DefaultGesturePreventer.preventDefault, {passive: false});\n\n        return new Promise(resolve => {\n            DefaultGesturePreventer.getStyleSheet().insertRule('html{-webkit-touch-callout:none;-webkit-user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0);-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}');\n            setTimeout(resolve);\n        });\n    }\n\n    static inactivePreventDefaultSelectGesture() {\n        if (!DefaultGesturePreventer.isActivePreventDefaultSelectGesture) return;\n\n        DefaultGesturePreventer.isActivePreventDefaultSelectGesture = false;\n        document.removeEventListener('touchstart', DefaultGesturePreventer.preventDefault);\n\n        try {\n            DefaultGesturePreventer.getStyleSheet().deleteRule(0);\n        } catch (e) {\n        }\n    }\n\n    private static getStyleSheet(): CSSStyleSheet {\n        if (!DefaultGesturePreventer.styleSheet) {\n            const style: HTMLStyleElement = document.createElement('style');\n            document.head.append(style);\n            DefaultGesturePreventer.styleSheet = style.sheet as CSSStyleSheet;\n        }\n\n        return DefaultGesturePreventer.styleSheet;\n    }\n\n    private static splitViewportContent(content: string): ViewportContentMap {\n        return content\n            .split(',')\n            .map(content => {\n                const kv = content.trim().split('=');\n                return {[kv[0]]: kv[1]};\n            })\n            .reduce((prev, curr) => Object.assign(prev, curr), {});\n    }\n\n    private static joinViewportContent(contentMap: ViewportContentMap): string {\n        return Object.keys(contentMap)\n            .map(key => key + '=' + contentMap[key])\n            .join(', ');\n    }\n}","interface ExtendedMouseEventMap {\n    'mouselongpressstart': MouseEvent;\n    'mouselongpressmove': MouseEvent;\n    'mouselongpressend': MouseEvent;\n    'mouselongpressleave': MouseEvent;\n\n    'mousepanstart': MouseEvent;\n    'mousepanmove': MouseEvent;\n    'mousepanleft': MouseEvent;\n    'mousepanright': MouseEvent;\n    'mousepanup': MouseEvent;\n    'mousepandown': MouseEvent;\n    'mousepanend': MouseEvent;\n    'mousepanleave': MouseEvent;\n}\n\ninterface ExtendedTouchEventMap {\n    'touchlongpressstart': TouchEvent;\n    'touchlongpressmove': TouchEvent;\n    'touchlongpressend': TouchEvent;\n    'touchlongpresscancel': TouchEvent;\n\n    'touchpanstart': TouchEvent;\n    'touchpanmove': TouchEvent;\n    'touchpanleft': TouchEvent;\n    'touchpanright': TouchEvent;\n    'touchpanup': TouchEvent;\n    'touchpandown': TouchEvent;\n    'touchpanend': TouchEvent;\n    'touchpancancel': TouchEvent;\n\n    'touchpinchstart': TouchEvent;\n    'touchpinchmove': TouchEvent;\n    'touchpinchend': TouchEvent;\n    'touchpinchcancel': TouchEvent;\n}\n\nexport interface ExtendedEventMap extends ExtendedMouseEventMap, ExtendedTouchEventMap {\n}\n\nexport interface ExtendedHTMLElementEventMap extends HTMLElementEventMap, ExtendedEventMap {\n}\n\nexport type ExtendedEventType =\n    | 'mouselongpress'\n    | 'mousepan'\n    | 'multiclick'\n    | 'touchlongpress'\n    | 'touchpan'\n    | 'touchpinch'\n    | 'touchrotate'\n    | 'multitouch';\ntype HTMLElementEventKey = keyof HTMLElementEventMap;\ntype ExtendedMouseEventKey = keyof ExtendedMouseEventMap;\ntype ExtendedTouchEventKey = keyof ExtendedTouchEventMap;\ntype ExtendedEventKey = keyof ExtendedEventMap;\ntype ExtendedHTMLElementEventKey = keyof Partial<ExtendedHTMLElementEventMap>;\n\nexport type AddEventListenerOptionsOrBoolean = AddEventListenerOptions | boolean;\nexport type EventHandlersEventMaps = ExtendedHTMLElementEventKey | ExtendedHTMLElementEventKey[];\nexport type EventListenerEventMap = Map<EventHandlersEventMaps, EventListenerOrEventListenerObject[]>;\n\nexport type ExtendedEventImplementation = Partial<{ [K in HTMLElementEventKey]: EventListenerOrEventListenerObject[] }>;\nexport type ExtendedEventInstance = { [K in ExtendedEventType]: ExtendedEventImplementation };\n\nexport interface EventManagerInstance {\n    generalEventInstance: WeakMap<EventTarget, EventListenerEventMap>;\n    extendedEventInstance: WeakMap<EventTarget, ExtendedEventInstance>;\n}\n\nconst extendedMouseEventMap: Record<ExtendedMouseEventKey, ExtendedEventType> = {\n    'mouselongpressstart': 'mouselongpress',\n    'mouselongpressmove': 'mouselongpress',\n    'mouselongpressend': 'mouselongpress',\n    'mouselongpressleave': 'mouselongpress',\n\n    'mousepanstart': 'mousepan',\n    'mousepanmove': 'mousepan',\n    'mousepanleft': 'mousepan',\n    'mousepanright': 'mousepan',\n    'mousepanup': 'mousepan',\n    'mousepandown': 'mousepan',\n    'mousepanend': 'mousepan',\n    'mousepanleave': 'mousepan',\n};\n\nconst extendedTouchEventMap: Record<ExtendedTouchEventKey, ExtendedEventType> = {\n    'touchlongpressstart': 'touchlongpress',\n    'touchlongpressmove': 'touchlongpress',\n    'touchlongpressend': 'touchlongpress',\n    'touchlongpresscancel': 'touchlongpress',\n\n    'touchpanstart': 'touchpan',\n    'touchpanmove': 'touchpan',\n    'touchpanleft': 'touchpan',\n    'touchpanright': 'touchpan',\n    'touchpanup': 'touchpan',\n    'touchpandown': 'touchpan',\n    'touchpanend': 'touchpan',\n    'touchpancancel': 'touchpan',\n\n    'touchpinchstart': 'touchpinch',\n    'touchpinchmove': 'touchpinch',\n    'touchpinchend': 'touchpinch',\n    'touchpinchcancel': 'touchpinch',\n};\n\nexport const extendedEventMap: Record<ExtendedEventKey, ExtendedEventType> = {\n    ...extendedMouseEventMap,\n    ...extendedTouchEventMap\n};","export class PathDirection {\n    static 'U' = 0\n    static 'UR' = 1\n    static 'R' = 2\n    static 'DR' = 3\n    static 'D' = 4\n    static 'DL' = 5\n    static 'L' = 6\n    static 'UL' = 7\n    static 'Unknown' = -1\n\n    static get4Direction(degree: number) {\n        if (degree >= 0 && degree <= 45) return PathDirection.R;\n        if (degree > 45 && degree <= 135) return PathDirection.D;\n        if (degree > 135 && degree <= 180) return PathDirection.L;\n        if (degree >= -180 && degree <= -135) return PathDirection.L;\n        if (degree > -135 && degree <= -45) return PathDirection.U;\n        if (degree > -45 && degree <= -0) return PathDirection.R;\n\n        return PathDirection.Unknown;\n    }\n\n    static get8Direction(degree: number) {\n        if (degree >= 0 && degree <= 22.5) return PathDirection.R;\n        if (degree > 22.5 && degree <= 67.5) return PathDirection.DR;\n        if (degree > 67.5 && degree <= 112.5) return PathDirection.D;\n        if (degree > 112.5 && degree <= 157.5) return PathDirection.DL;\n        if (degree > 157.5 && degree <= 180) return PathDirection.L;\n        if (degree >= -180 && degree <= -157.5) return PathDirection.L;\n        if (degree > -157.5 && degree <= -112.5) return PathDirection.UL;\n        if (degree > -112.5 && degree <= -67.5) return PathDirection.U;\n        if (degree > -67.5 && degree <= -22.5) return PathDirection.UR;\n        if (degree > -22.5 && degree <= -0) return PathDirection.R;\n\n        return PathDirection.Unknown;\n    }\n}\n\nexport class EventPosition {\n    readonly x: number;\n    readonly y: number;\n    readonly t: number;\n\n    constructor(...args: any) {\n        this.t = window.performance.now();\n\n        const arg0 = args[0];\n        const arg1 = args[1];\n\n        if (arg0 instanceof MouseEvent) {\n            this.x = arg0.clientX;\n            this.y = arg0.clientY;\n        } else if (arg0 instanceof TouchEvent && typeof arg1 === 'number' && arg0.touches.length > arg1) {\n            this.x = arg0.touches[arg1].clientX;\n            this.y = arg0.touches[arg1].clientY;\n        } else if (typeof arg0 === 'number' && typeof arg1 === 'number') {\n            this.x = arg0;\n            this.y = arg1;\n        } else {\n            this.x = NaN;\n            this.y = NaN;\n        }\n    }\n\n    static fromMouseEvent(event: Event): EventPosition {\n        return new EventPosition(event);\n    }\n\n    static fromTouchEvent(event: Event, n: number = 0): EventPosition {\n        return new EventPosition(event, n);\n    }\n\n    static fromCoordinate(x: number, y: number): EventPosition {\n        return new EventPosition(x, y);\n    }\n\n    static center(p1: EventPosition, p2: EventPosition): EventPosition {\n        return new EventPosition((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);\n    }\n\n    distance(to: EventPosition): number {\n        const dx = this.x - to.x;\n        const dy = this.y - to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    timeDiff(to: EventPosition): number {\n        return Math.abs(this.t - to.t);\n    }\n}\n\nexport class EventPath {\n    readonly start: EventPosition;\n    readonly end: EventPosition;\n    readonly center: EventPosition;\n    readonly dx: number;\n    readonly dy: number;\n    readonly distance: number;\n    readonly speed: number;\n    readonly time: number;\n    readonly radian: number;\n    readonly degree: number;\n    readonly direction: PathDirection;\n\n    constructor(p1: EventPosition, p2: EventPosition) {\n        this.start = p1;\n        this.end = p2;\n        this.center = EventPosition.center(p1, p2);\n        this.dx = p2.x - p1.x;\n        this.dy = p2.y - p1.y;\n        this.distance = p2.distance(p1);\n        this.time = p2.t - p1.t;\n        this.speed = this.distance / this.time;\n        this.radian = Math.atan2(this.dy, this.dx);\n        this.degree = this.radian * (180 / Math.PI);\n        this.direction = PathDirection.get8Direction(this.degree);\n    }\n\n    equals(other: EventPath) {\n        return this.start.x === other.start.x && this.end.x === other.end.x && this.start.y === other.start.y && this.end.y === other.end.y;\n    }\n}\n\nexport class EventPathList extends Array<EventPath> {\n    readonly first: EventPath | undefined;\n    readonly last: EventPath | undefined;\n\n    constructor(paths: EventPath[]) {\n        super();\n        if (paths.length > 0) {\n            this.push(...paths);\n            this.first = paths[0];\n            this.last = paths[this.length - 1];\n        }\n    }\n\n    item(n: number): EventPath | undefined {\n        if (this.length > n) {\n            return this[n];\n        }\n        return;\n    }\n\n    private dPath(index: number, property: keyof EventPath) {\n        if (index < 1) {\n            return;\n        }\n\n        const item1 = this.item(index);\n        const item2 = this.item(index - 1);\n\n        if (item1 && item2) {\n            const value1 = item1[property];\n            const value2 = item2[property];\n\n            if (value1 instanceof EventPosition && value2 instanceof EventPosition) {\n                return new EventPath(value1, value2);\n            }\n        }\n        return;\n    }\n\n    private dNumber(index: number, property: keyof EventPath) {\n        if (index < 1) {\n            return;\n        }\n\n        const item1 = this.item(index);\n        const item2 = this.item(index - 1);\n\n        if (item1 && item2) {\n            const value1 = item1[property];\n            const value2 = item2[property];\n\n            if (typeof value1 === 'number' && typeof value2 === 'number') {\n                return value2 - value1;\n            }\n        }\n        return;\n    }\n\n    dStart(index: number) {\n        return this.dPath(index, 'start');\n    }\n\n    dEnd(index: number) {\n        return this.dPath(index, 'end');\n    }\n\n    dCenter(index: number) {\n        return this.dPath(index, 'center');\n    }\n\n    dDistance(index: number) {\n        return this.dNumber(index, 'distance');\n    }\n\n    dRadian(index: number) {\n        return this.dNumber(index, 'radian');\n    }\n\n    dDegree(index: number) {\n        return this.dNumber(index, 'degree');\n    }\n}","import {EventPath, EventPathList} from \"./geometry\";\n\nclass CloneEventInit {\n    static clone<T extends EventInit>(event: Event): T {\n        return Object.assign({}, event) as unknown as T;\n    }\n}\n\nexport class ExtendedMouseEvent extends MouseEvent {\n    paths: EventPathList;\n\n    constructor(type: string, event: Event, paths: EventPath[] = []) {\n        super(type, CloneEventInit.clone(event));\n        this.paths = new EventPathList(paths);\n    }\n}\n\nexport class ExtendedTouchEvent extends TouchEvent {\n    paths: EventPathList;\n\n    constructor(type: string, event: Event, paths: EventPath[] = []) {\n        super(type, CloneEventInit.clone(event));\n        this.paths = new EventPathList(paths);\n    }\n}","import {DefaultGesturePreventer, EventType, TaskScheduler} from \"./utils\";\nimport {AddEventListenerOptionsOrBoolean, EventHandlersEventMaps, EventListenerEventMap, EventManagerInstance, ExtendedEventImplementation, ExtendedEventInstance, ExtendedEventMap, extendedEventMap, ExtendedEventType, ExtendedHTMLElementEventMap} from \"./interfacecs\";\nimport {ExtendedMouseEvent, ExtendedTouchEvent} from \"./event\";\nimport {EventPath, EventPathList, EventPosition, PathDirection} from \"./geometry\";\n\nexport { EventPath, EventPathList, EventPosition, PathDirection, ExtendedMouseEvent, ExtendedTouchEvent };\n\n(() => {\n    if (typeof window !== 'undefined' && typeof window.TouchEvent === 'undefined') {\n        class TouchEvent extends UIEvent {\n            constructor(type: string, init?: TouchEventInit) {\n                super(type, init);\n            }\n        }\n\n        (window as any).TouchEvent = TouchEvent;\n    }\n})();\n\n// class\nconst scheduler = new TaskScheduler(5);\n\nexport class EventManager {\n    static instance: EventManagerInstance = {\n        generalEventInstance: new WeakMap(),\n        extendedEventInstance: new WeakMap()\n    };\n\n    static options = {\n        strict: true,\n        mouseLongpressTimeRequired: 750,\n        mouseLongpressBelowDistance: 15,\n        touchLongpressTimeRequired: 750,\n        touchLongpressBelowDistance: 30,\n    };\n\n    static passiveSupported = false;\n    static onceSupported = false;\n\n    static add(target: EventTarget, types: EventHandlersEventMaps, callback: EventListenerOrEventListenerObject, options?: AddEventListenerOptionsOrBoolean): void {\n        for (const type of EventManager.toArray(types)) {\n            if (!!EventManager.extendedEventKey(type)) {\n                EventManager.addExtendedEventListener(target, types, callback);\n            } else {\n                const eventType = EventType.get(target, type);\n                if (!eventType) {\n                    continue;\n                }\n                target.addEventListener(type, callback, options);\n            }\n\n            EventManager.storeEventListener(target, type, callback);\n        }\n    }\n\n    private static extendedEventKey(type: string): string | undefined {\n        return extendedEventMap[type as keyof ExtendedEventMap];\n    }\n\n    private static addExtendedEventListener(target: EventTarget, types: EventHandlersEventMaps, callback: EventListenerOrEventListenerObject): void {\n        for (const type of EventManager.toArray(types)) {\n            target.addEventListener(type, callback);\n\n            switch (EventManager.extendedEventKey(type)) {\n                case 'mouselongpress':\n                    EventManager.addMouseLongpressEvent(target);\n                    break;\n                case 'mousepan':\n                    EventManager.addMousePanEvent(target);\n                    break;\n                case 'touchlongpress':\n                    EventManager.addTouchLongpressEvent(target);\n                    break;\n                case 'touchpan':\n                    EventManager.addTouchPanEvent(target);\n                    break;\n                case 'touchpinch':\n                    EventManager.addTouchpinchEvent(target);\n                    break;\n            }\n        }\n    }\n\n    static remove(target: EventTarget, types?: EventHandlersEventMaps, callback?: EventListenerOrEventListenerObject): void {\n        const listenerEventMap = EventManager.instance.generalEventInstance.get(target);\n\n        if (!listenerEventMap) return;\n\n        if (types) {\n            EventManager.removeEventListenerFromType(target, types, callback);\n        } else {\n            const keys = listenerEventMap.keys();\n            let key = keys.next();\n\n            while (!key.done) {\n                const types = key.value;\n                EventManager.removeEventListenerFromType(target, types, callback);\n                key = keys.next();\n            }\n        }\n    }\n\n    private static removeEventListenerFromType(target: EventTarget, types: EventHandlersEventMaps, comparator: EventListenerOrEventListenerObject | undefined): void {\n        const listenerEventMap = EventManager.instance.generalEventInstance.get(target);\n\n        if (!listenerEventMap) return;\n\n        for (const type of EventManager.toArray(types)) {\n            const fns = [];\n            const listeners = listenerEventMap.get(type);\n\n            if (listeners) {\n                for (const listener of listeners) {\n                    const fn = EventManager.matchAndRemoveListener(target, type, comparator, listener);\n                    if (fn) {\n                        fns.push(fn);\n                    }\n                }\n\n                for (const fn of fns) {\n                    listeners.splice(listeners.indexOf(fn), 1);\n                }\n\n                if (listeners.length === 0) {\n                    listenerEventMap.delete(types);\n                }\n            }\n\n            if (listenerEventMap.size === 0) {\n                EventManager.instance.generalEventInstance.delete(target);\n            }\n\n            const extendedEventKey = EventManager.extendedEventKey(type);\n            if (extendedEventKey) {\n                const keys = listenerEventMap.keys();\n                let key = keys.next();\n                let removeExtendedEvent = true;\n\n                loop: while (!key.done) {\n                    const types = key.value;\n                    for (const type of EventManager.toArray(types)) {\n                        if (extendedEventKey === EventManager.extendedEventKey(type)) {\n                            removeExtendedEvent = false;\n                            break loop;\n                        }\n                    }\n                    key = keys.next();\n                }\n\n                if (removeExtendedEvent) {\n                    EventManager.removeExtendedEvent(target, extendedEventKey as ExtendedEventType)\n                }\n            }\n        }\n    }\n\n    private static matchAndRemoveListener(target: EventTarget, types: keyof ExtendedHTMLElementEventMap, comparator: EventListenerOrEventListenerObject | undefined, callback: EventListenerOrEventListenerObject): EventListenerOrEventListenerObject | undefined {\n        if (!comparator || comparator === callback) {\n            return EventManager.removeEventListenerOne(target, types, callback);\n        }\n        return;\n    }\n\n    private static removeEventListenerOne(target: EventTarget, types: keyof ExtendedHTMLElementEventMap, callback: EventListenerOrEventListenerObject): EventListenerOrEventListenerObject | undefined {\n        target.removeEventListener(types, callback);\n        EventManager.instance.generalEventInstance.get(target)?.delete(types);\n        return callback;\n    }\n\n    private static storeEventListener(target: EventTarget, types: EventHandlersEventMaps, callback: EventListenerOrEventListenerObject): void {\n        const listeners = [...EventManager.getOrCreateListenerMap(target, types), callback];\n\n        EventManager.getOrCreateEventListenerEventMap(target).set(types, listeners);\n    }\n\n    private static getOrCreateListenerMap(target: EventTarget, types: EventHandlersEventMaps): EventListenerOrEventListenerObject[] {\n        const listenerEventMap = EventManager.getOrCreateEventListenerEventMap(target);\n        const listeners = listenerEventMap.get(types);\n\n        if (listeners) {\n            return listeners;\n        } else {\n            const newArray: EventListenerOrEventListenerObject[] = [];\n            listenerEventMap.set(types, newArray);\n\n            return newArray;\n        }\n    }\n\n    private static getOrCreateEventListenerEventMap(target: EventTarget): EventListenerEventMap {\n        const listenerEventMap = EventManager.instance.generalEventInstance.get(target);\n\n        if (listenerEventMap) {\n            return listenerEventMap;\n        } else {\n            const newMap = new Map();\n            EventManager.instance.generalEventInstance.set(target, newMap);\n\n            return newMap;\n        }\n    }\n\n    private static getExtendedEvent(target: EventTarget): ExtendedEventInstance | undefined {\n        return EventManager.instance.extendedEventInstance.get(target);\n    }\n\n    private static addExtendedEvent(target: EventTarget, extendedEvent: ExtendedEventType, implementation: ExtendedEventImplementation): void {\n        const existingEvents = EventManager.getExtendedEvent(target) || {} as ExtendedEventInstance;\n        EventManager.instance.extendedEventInstance.set(target, {...existingEvents, [extendedEvent]: implementation});\n    }\n\n    private static hasExtendedEventImplementation(target: EventTarget, extendedEvent: ExtendedEventType): boolean {\n        return !!EventManager.getExtendedEvent(target)?.[extendedEvent];\n    }\n\n    private static removeExtendedEvent(target: EventTarget, extendedEvent: ExtendedEventType): void {\n        const extendedInstance = EventManager.getExtendedEvent(target);\n\n        if (extendedInstance) {\n            const implementation = extendedInstance[extendedEvent];\n            if (implementation) {\n                for (const type in implementation) {\n                    const callbacks = implementation[type as keyof ExtendedEventImplementation];\n                    if (callbacks) {\n                        for (const callback of callbacks) {\n                            target.removeEventListener(type, callback);\n                        }\n                    }\n                }\n            }\n            delete extendedInstance[extendedEvent];\n\n            if (Object.keys(extendedInstance).length === 0) {\n                EventManager.instance.extendedEventInstance.delete(target);\n            }\n        }\n    }\n\n    private static addMouseLongpressEvent(target: EventTarget): void {\n        if (!EventManager.hasExtendedEventImplementation(target, 'mouselongpress')) {\n            let mouseDownPosition: EventPosition | undefined;\n            let timeout: number | undefined;\n            let isMouseDown = false;\n\n            const clear = () => {\n                target.removeEventListener('mousemove', onMouseMove);\n                target.removeEventListener('mouseup', onMouseUp);\n                target.removeEventListener('mouseleave', onMouseLeave);\n                if (timeout) window.clearTimeout(timeout);\n            };\n\n            const onMouseDown = (event: Event) => {\n                isMouseDown = true;\n                mouseDownPosition = EventPosition.fromMouseEvent(event);\n                clear();\n                target.addEventListener('mousemove', onMouseMove, {passive: false});\n\n                timeout = window.setTimeout(() => {\n                    target.dispatchEvent(new ExtendedMouseEvent('mouselongpressstart', event));\n                    target.removeEventListener('mouseup', clear);\n                    target.removeEventListener('mouseleave', clear);\n                    target.addEventListener('mouseup', onMouseUp, {passive: false});\n                    target.addEventListener('mouseleave', onMouseLeave, {passive: false});\n                }, EventManager.options.mouseLongpressTimeRequired);\n            };\n\n            const onMouseUp = (event: Event) => {\n                if (mouseDownPosition) {\n                    target.dispatchEvent(new ExtendedMouseEvent('mouselongpressend', event, [new EventPath(mouseDownPosition, EventPosition.fromMouseEvent(event))]));\n                }\n                clear();\n            };\n\n            const onMouseLeave = (event: Event) => {\n                if (mouseDownPosition) {\n                    target.dispatchEvent(new ExtendedMouseEvent('mouselongpressleave', event, [new EventPath(mouseDownPosition, EventPosition.fromMouseEvent(event))]));\n                }\n                clear();\n            };\n\n            const setMouseDownState = () => {\n                isMouseDown = false;\n            };\n\n            const onMouseMove = (event: Event) => {\n                if (!isMouseDown) {\n                    clear();\n                    return;\n                }\n\n                if (mouseDownPosition) {\n                    const mouseMovePosition = EventPosition.fromMouseEvent(event);\n\n                    if (mouseDownPosition.timeDiff(mouseMovePosition) < EventManager.options.mouseLongpressTimeRequired && mouseDownPosition.distance(mouseMovePosition) > EventManager.options.mouseLongpressBelowDistance) {\n                        clear();\n                    } else if (mouseDownPosition.timeDiff(mouseMovePosition) >= EventManager.options.mouseLongpressTimeRequired) {\n                        if (EventManager.options.strict) {\n                            target.dispatchEvent(new ExtendedMouseEvent('mouselongpressmove', event, [new EventPath(mouseDownPosition!, mouseMovePosition)]));\n                        } else {\n                            scheduler.scheduleTask(() => {\n                                if (isMouseDown) {\n                                    target.dispatchEvent(new ExtendedMouseEvent('mouselongpressmove', event, [new EventPath(mouseDownPosition!, mouseMovePosition)]));\n                                }\n                            });\n                        }\n                    }\n                }\n            };\n\n            target.addEventListener('mousedown', onMouseDown, {passive: false});\n            target.addEventListener('mouseup', clear, {passive: false});\n            target.addEventListener('mouseleave', clear, {passive: false});\n            target.addEventListener('mouseup', setMouseDownState, {passive: false});\n            target.addEventListener('mouseleave', setMouseDownState, {passive: false});\n\n            EventManager.addExtendedEvent(target, 'mouselongpress', {\n                'mousedown': [onMouseDown],\n                'mouseup': [onMouseUp, setMouseDownState, clear],\n                'mouseleave': [onMouseUp, setMouseDownState, clear],\n                'mousemove': [onMouseMove]\n            });\n        }\n    }\n\n    private static addMousePanEvent(target: EventTarget): void {\n        if (!EventManager.hasExtendedEventImplementation(target, 'mousepan')) {\n            let mouseDownPosition: EventPosition | undefined;\n            let previousPosition: EventPosition | undefined;\n            let mousepanPath: EventPath[] = [];\n            let isGestureActive = false;\n            let isMouseDown = false;\n\n            const clear = () => {\n                mousepanPath = [];\n                isGestureActive = false;\n                target.removeEventListener('mousemove', onMouseMove);\n                target.removeEventListener('mouseup', onMouseUp);\n                target.removeEventListener('mouseleave', onMouseLeave);\n            };\n\n            const onMouseDown = (event: Event) => {\n                isMouseDown = true;\n                mouseDownPosition = EventPosition.fromMouseEvent(event);\n                previousPosition = mouseDownPosition;\n                clear();\n                target.addEventListener('mousemove', onMouseMove, {passive: false});\n                target.addEventListener('mouseup', onMouseUp, {passive: false});\n                target.addEventListener('mouseleave', onMouseLeave, {passive: false});\n            };\n\n            const onMouseUp = (event: Event) => {\n                if (isGestureActive && mouseDownPosition) {\n                    parseDirection(event)\n                    target.dispatchEvent(new ExtendedMouseEvent('mousepanend', event, [new EventPath(mouseDownPosition, EventPosition.fromMouseEvent(event))]));\n                }\n                clear();\n            };\n\n            const onMouseLeave = (event: Event) => {\n                if (isGestureActive && mouseDownPosition) {\n                    parseDirection(event)\n                    target.dispatchEvent(new ExtendedMouseEvent('mousepanleave', event, [new EventPath(mouseDownPosition, EventPosition.fromMouseEvent(event))]));\n                }\n                clear();\n            };\n\n            const setMouseDownState = () => {\n                isMouseDown = false;\n            };\n\n            const parseDirection = (event: Event) => {\n                if (mouseDownPosition) {\n                    let newMousepanPath = [];\n                    let position;\n                    for (const path of mousepanPath) {\n                        if (!position) {\n                            position = path.start;\n                        }\n\n                        const newPath = new EventPath(position, path.end);\n                        if (newPath.distance >= 25) {\n                            newMousepanPath.push(newPath);\n                            position = null;\n                        }\n                    }\n\n                    const directions = new Set(newMousepanPath.map(path => PathDirection.get4Direction(path.degree)));\n\n                    if (directions.size === 1) {\n                        let type;\n\n                        if (directions.has(0)) {\n                            type = 'mousepanup';\n                        } else if (directions.has(2)) {\n                            type = 'mousepanright';\n                        } else if (directions.has(4)) {\n                            type = 'mousepandown';\n                        } else if (directions.has(6)) {\n                            type = 'mousepanleft';\n                        }\n\n                        if (type) {\n                            target.dispatchEvent(new ExtendedMouseEvent(type, event, newMousepanPath));\n                        }\n                    }\n                }\n            };\n\n            const onMouseMove = (event: Event) => {\n                if (previousPosition && mouseDownPosition) {\n\n                    const mouseMovePosition = EventPosition.fromMouseEvent(event);\n                    const path = new EventPath(previousPosition, mouseMovePosition);\n                    const length = mousepanPath.length;\n\n                    previousPosition = mouseMovePosition;\n\n                    if (length === 0 && path.distance > 0) {\n                        target.dispatchEvent(new ExtendedMouseEvent('mousepanstart', event, mousepanPath));\n                    }\n\n                    if (path.distance > 0) {\n                        isGestureActive = true;\n                        mousepanPath.push(path);\n\n                        if (EventManager.options.strict) {\n                            target.dispatchEvent(new ExtendedMouseEvent('mousepanmove', event, mousepanPath));\n                        } else {\n                            scheduler.scheduleTask(() => {\n                                if (isMouseDown) {\n                                    target.dispatchEvent(new ExtendedMouseEvent('mousepanmove', event, mousepanPath));\n                                }\n                            });\n                        }\n                    }\n                }\n            };\n\n            target.addEventListener('mousedown', onMouseDown, {passive: false});\n            target.addEventListener('mouseup', setMouseDownState, {passive: false});\n            target.addEventListener('mouseleave', setMouseDownState, {passive: false});\n\n            EventManager.addExtendedEvent(target, 'mousepan', {\n                'mousedown': [onMouseDown],\n                'mouseup': [onMouseUp, setMouseDownState],\n                'mouseleave': [onMouseLeave, setMouseDownState],\n                'mousemove': [onMouseMove]\n            });\n        }\n    }\n\n    private static addTouchLongpressEvent(target: EventTarget): void {\n        if (!EventManager.hasExtendedEventImplementation(target, 'touchlongpress')) {\n            let touchStartPosition: EventPosition | undefined;\n            let previousPosition: EventPosition | undefined;\n            let timeout: number | undefined;\n            let isGestureActive = false;\n            let isTouchDown = false;\n\n            const clear = () => {\n                isGestureActive = false;\n                target.removeEventListener('touchmove', onTouchMove);\n                target.removeEventListener('touchend', onTouchEnd);\n                target.removeEventListener('touchcancel', onTouchCancel);\n                if (timeout) window.clearTimeout(timeout);\n            };\n\n            const onTouchStart = (event: Event) => {\n                if (event instanceof TouchEvent && event.touches.length === 1) {\n                    DefaultGesturePreventer.activePreventDefaultSelectGesture().then(() => {\n                        isTouchDown = true;\n                        touchStartPosition = EventPosition.fromTouchEvent(event, 0);\n                        previousPosition = touchStartPosition;\n                        clear();\n                        target.addEventListener('touchmove', onTouchMove, {passive: false});\n\n                        timeout = window.setTimeout(() => {\n                            if (isTouchDown) {\n                                isGestureActive = true;\n                                target.dispatchEvent(new ExtendedTouchEvent('touchlongpressstart', event));\n                                target.removeEventListener('touchend', clear);\n                                target.removeEventListener('touchcancel', clear);\n                                target.addEventListener('touchend', onTouchEnd, {passive: false});\n                                target.addEventListener('touchcancel', onTouchCancel, {passive: false});\n                            }\n                        }, EventManager.options.touchLongpressTimeRequired);\n                    });\n                } else if (isGestureActive) {\n                    onTouchCancel(event);\n                } else {\n                    clear();\n                }\n            };\n\n            const onTouchEnd = (event: Event) => {\n                if (touchStartPosition && previousPosition) {\n                    target.dispatchEvent(new ExtendedTouchEvent('touchlongpressend', event, [new EventPath(touchStartPosition, previousPosition)]));\n                }\n                clear();\n            };\n\n            const onTouchCancel = (event: Event) => {\n                if (touchStartPosition && previousPosition) {\n                    target.dispatchEvent(new ExtendedTouchEvent('touchlongpresscancel', event, [new EventPath(touchStartPosition, previousPosition)]));\n                }\n                clear();\n            };\n\n            const setTouchDownState = () => {\n                isTouchDown = false;\n                DefaultGesturePreventer.inactivePreventDefaultSelectGesture();\n            };\n\n            const onTouchMove = (event: Event) => {\n                if (event instanceof TouchEvent && event.touches.length === 1) {\n                    if (!isTouchDown) {\n                        clear();\n                        return;\n                    }\n\n                    if (touchStartPosition) {\n                        const touchMovePosition = EventPosition.fromTouchEvent(event, 0);\n\n                        if (touchStartPosition.timeDiff(touchMovePosition) < EventManager.options.touchLongpressTimeRequired && touchStartPosition.distance(touchMovePosition) > EventManager.options.touchLongpressBelowDistance) {\n                            clear();\n                        } else if (touchStartPosition.timeDiff(touchMovePosition) >= EventManager.options.touchLongpressTimeRequired && previousPosition) {\n                            const touchMovePosition = EventPosition.fromTouchEvent(event, 0);\n                            const path = new EventPath(previousPosition, touchMovePosition);\n\n                            if (path.distance > 0) {\n                                if (EventManager.options.strict) {\n                                    target.dispatchEvent(new ExtendedTouchEvent('touchlongpressmove', event, [new EventPath(touchStartPosition!, touchMovePosition)]));\n                                } else {\n                                    scheduler.scheduleTask(() => {\n                                        if (isTouchDown) {\n                                            target.dispatchEvent(new ExtendedTouchEvent('touchlongpressmove', event, [new EventPath(touchStartPosition!, touchMovePosition)]));\n                                        }\n                                    });\n                                }\n                            }\n                        }\n\n                        previousPosition = touchMovePosition;\n                    }\n                }\n            };\n\n            const preventDefault = (event: Event) => event.preventDefault();\n\n            target.addEventListener('contextmenu', preventDefault, {passive: false});\n            target.addEventListener('touchstart', onTouchStart, {passive: false});\n            target.addEventListener('touchend', clear, {passive: false});\n            target.addEventListener('touchcancel', clear, {passive: false});\n            target.addEventListener('touchend', setTouchDownState, {passive: false});\n            target.addEventListener('touchcancel', setTouchDownState, {passive: false});\n\n            EventManager.addExtendedEvent(target, 'touchlongpress', {\n                'contextmenu': [preventDefault],\n                'touchstart': [onTouchStart],\n                'touchend': [onTouchEnd, setTouchDownState, clear],\n                'touchcancel': [onTouchCancel, setTouchDownState, clear],\n                'touchmove': [onTouchMove]\n            });\n        }\n    }\n\n    private static addTouchPanEvent(target: EventTarget): void {\n        if (!EventManager.hasExtendedEventImplementation(target, 'touchpan')) {\n            let touchStartPosition: EventPosition | undefined;\n            let previousPosition: EventPosition | undefined;\n            let touchpanPath: EventPath[] = [];\n            let isGestureActive = false;\n            let isTouchDown = false;\n\n            const clear = () => {\n                touchpanPath = [];\n                isGestureActive = false;\n                target.removeEventListener('touchmove', onTouchMove);\n                target.removeEventListener('touchend', onTouchEnd);\n                target.removeEventListener('touchcancel', onTouchCancel);\n            };\n\n            const onTouchStart = (event: Event) => {\n                if (event instanceof TouchEvent && event.touches.length === 1) {\n                    DefaultGesturePreventer.activePreventDefaultPanGesture().then(() => {\n                        isTouchDown = true;\n                        touchStartPosition = EventPosition.fromTouchEvent(event, 0);\n                        previousPosition = touchStartPosition;\n                        clear();\n                        target.addEventListener('touchmove', onTouchMove, {passive: false});\n                        target.addEventListener('touchend', onTouchEnd, {passive: false});\n                        target.addEventListener('touchcancel', onTouchCancel, {passive: false});\n                    });\n                } else if (isGestureActive) {\n                    onTouchCancel(event);\n                }\n            };\n\n            const onTouchEnd = (event: Event) => {\n                if (isGestureActive && touchStartPosition && previousPosition) {\n                    parseDirection(event);\n                    target.dispatchEvent(new ExtendedTouchEvent('touchpanend', event, [new EventPath(touchStartPosition, previousPosition)]));\n                }\n                clear();\n            };\n\n            const onTouchCancel = (event: Event) => {\n                if (isGestureActive && touchStartPosition && previousPosition) {\n                    target.dispatchEvent(new ExtendedTouchEvent('touchpancancel', event, [new EventPath(touchStartPosition, previousPosition)]));\n                }\n                clear();\n            };\n\n            const setTouchDownState = () => {\n                isTouchDown = false;\n                DefaultGesturePreventer.inactivePreventDefaultPanGesture();\n            };\n\n            const parseDirection = (event: Event) => {\n                if (touchStartPosition) {\n                    let newTouchpanPath = [];\n                    let position;\n                    for (const path of touchpanPath) {\n                        if (!position) {\n                            position = path.start;\n                        }\n\n                        const newPath = new EventPath(position, path.end);\n                        if (newPath.distance >= 25) {\n                            newTouchpanPath.push(newPath);\n                            position = null;\n                        }\n                    }\n\n                    const directions = new Set(newTouchpanPath.map(path => PathDirection.get4Direction(path.degree)));\n\n                    if (directions.size === 1) {\n                        let type;\n\n                        if (directions.has(0)) {\n                            type = 'touchpanup';\n                        } else if (directions.has(2)) {\n                            type = 'touchpanright';\n                        } else if (directions.has(4)) {\n                            type = 'touchpandown';\n                        } else if (directions.has(6)) {\n                            type = 'touchpanleft';\n                        }\n\n                        if (type) {\n                            target.dispatchEvent(new ExtendedMouseEvent(type, event, newTouchpanPath));\n                        }\n                    }\n                }\n            };\n\n            const onTouchMove = (event: Event) => {\n                if (event instanceof TouchEvent && event.touches.length === 1) {\n                    if (previousPosition && touchStartPosition) {\n                        const touchMovePosition = EventPosition.fromTouchEvent(event, 0);\n                        const path = new EventPath(previousPosition, touchMovePosition);\n                        const length = touchpanPath.length;\n\n                        previousPosition = touchMovePosition;\n\n                        if (length === 0 && path.distance > 0) {\n                            target.dispatchEvent(new ExtendedTouchEvent('touchpanstart', event, touchpanPath));\n                        }\n\n                        if (path.distance > 0) {\n                            isGestureActive = true;\n                            touchpanPath.push(path);\n\n                            if (EventManager.options.strict) {\n                                target.dispatchEvent(new ExtendedTouchEvent('touchpanmove', event, touchpanPath));\n                            } else {\n                                scheduler.scheduleTask(() => {\n                                    if (isTouchDown) {\n                                        target.dispatchEvent(new ExtendedTouchEvent('touchpanmove', event, touchpanPath));\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            };\n\n            const preventDefault = (event: Event) => event.preventDefault();\n\n            target.addEventListener('contextmenu', preventDefault, {passive: false});\n            target.addEventListener('touchstart', onTouchStart, {passive: false});\n            target.addEventListener('touchend', setTouchDownState, {passive: false});\n            target.addEventListener('touchcancel', setTouchDownState, {passive: false});\n\n            EventManager.addExtendedEvent(target, 'touchpan', {\n                'contextmenu': [preventDefault],\n                'touchstart': [onTouchStart],\n                'touchend': [onTouchEnd, setTouchDownState],\n                'touchcancel': [onTouchCancel, setTouchDownState],\n                'touchmove': [onTouchMove]\n            });\n        }\n    }\n\n    private static addTouchpinchEvent(target: EventTarget): void {\n        if (!EventManager.hasExtendedEventImplementation(target, 'touchpinch')) {\n            let touchStartPosition: EventPosition[] = [];\n            let touchStartPath: EventPath | undefined;\n            let previousPosition: EventPosition[] = [];\n            let touchpinchPath: EventPath[] = [];\n            let isGestureActive = false;\n            let isTouchDown = false;\n\n            const clear = () => {\n                touchStartPosition = [];\n                previousPosition = [];\n                touchpinchPath = [];\n                isGestureActive = false;\n                target.removeEventListener('touchmove', onTouchMove);\n                target.removeEventListener('touchend', onTouchEnd);\n                target.removeEventListener('touchcancel', onTouchCancel);\n                DefaultGesturePreventer.inactivePreventDefaultPinchGesture();\n            };\n\n            const onTouchStart = (event: Event) => {\n                if (event instanceof TouchEvent && event.touches.length > 1) {\n                    DefaultGesturePreventer.activePreventDefaultPinchGesture().then(() => {\n                        const touchLength = event.touches.length;\n\n                        isTouchDown = true;\n                        clear();\n\n                        for (let i = 0; i < touchLength; i++) {\n                            touchStartPosition.push(EventPosition.fromTouchEvent(event, i));\n                        }\n                        previousPosition = touchStartPosition;\n                        touchStartPath = new EventPath(touchStartPosition[0], touchStartPosition[1]);\n                        target.addEventListener('touchmove', onTouchMove, {passive: false});\n                        target.addEventListener('touchend', onTouchEnd, {passive: false});\n                        target.addEventListener('touchcancel', onTouchCancel, {passive: false});\n                    });\n                }\n            };\n\n            const onTouchEnd = (event: Event) => {\n                if (isGestureActive && touchStartPosition && previousPosition) {\n                    target.dispatchEvent(new ExtendedTouchEvent('touchpinchend', event, [new EventPath(EventPosition.center(touchStartPosition[0], touchStartPosition[1]), EventPosition.center(previousPosition[0], previousPosition[1]))]));\n                }\n                clear();\n            };\n\n            const onTouchCancel = (event: Event) => {\n                if (isGestureActive && touchStartPosition && previousPosition) {\n                    target.dispatchEvent(new ExtendedTouchEvent('touchpinchcancel', event, [new EventPath(EventPosition.center(touchStartPosition[0], touchStartPosition[1]), EventPosition.center(previousPosition[0], previousPosition[1]))]));\n                }\n                clear();\n            };\n\n            const setTouchDownState = () => {\n                isTouchDown = false;\n                DefaultGesturePreventer.inactivePreventDefaultPinchGesture();\n            };\n\n            const onTouchMove = (event: Event) => {\n                if (previousPosition.length > 1 && touchStartPosition.length > 1 && touchStartPath && event instanceof TouchEvent && event.touches.length > 1) {\n                    const touchLength = event.touches.length;\n                    const touchMovePosition = [];\n                    const paths = [];\n                    const length = touchpinchPath.length;\n\n                    for (let i = 0; i < touchLength; i++) {\n                        const position = EventPosition.fromTouchEvent(event, i);\n                        touchMovePosition.push(position);\n                        paths.push(new EventPath(position, touchMovePosition[i]));\n                    }\n\n                    const path = new EventPath(touchMovePosition[0], touchMovePosition[1]);\n\n                    previousPosition = touchMovePosition;\n\n                    if (length === 0 && !touchStartPath.equals(path)) {\n                        target.dispatchEvent(new ExtendedTouchEvent('touchpinchstart', event, touchpinchPath));\n                    }\n\n                    if (!(length === 0 && touchStartPath.equals(path)) && !(length > 0 && touchpinchPath[length - 1].equals(path))) {\n                        isGestureActive = true;\n                        touchpinchPath.push(path);\n\n                        if (EventManager.options.strict) {\n                            target.dispatchEvent(new ExtendedTouchEvent('touchpinchmove', event, touchpinchPath));\n                        } else {\n                            scheduler.scheduleTask(() => {\n                                if (isTouchDown) {\n                                    target.dispatchEvent(new ExtendedTouchEvent('touchpinchmove', event, touchpinchPath));\n                                }\n                            });\n                        }\n                    }\n                }\n            };\n\n            const preventDefault = (event: Event) => event.preventDefault();\n\n            target.addEventListener('contextmenu', preventDefault, {passive: false});\n            target.addEventListener('touchstart', onTouchStart, {passive: false});\n            target.addEventListener('touchend', setTouchDownState, {passive: false});\n            target.addEventListener('touchcancel', setTouchDownState, {passive: false});\n\n            EventManager.addExtendedEvent(target, 'touchpinch', {\n                'contextmenu': [preventDefault],\n                'touchstart': [onTouchStart],\n                'touchend': [onTouchEnd, setTouchDownState],\n                'touchcancel': [onTouchCancel, setTouchDownState],\n                'touchmove': [onTouchMove]\n            });\n        }\n    }\n\n    private static toArray<T>(input: T | T[]): T[] {\n        return Array.isArray(input) ? input : [input];\n    }\n}\n\n(function () {\n    try {\n        const empty = () => {\n        };\n\n        const options = Object.create({}, {\n            passive: {\n                get() {\n                    EventManager.passiveSupported = true;\n                    return undefined;\n                }\n            },\n            once: {\n                get() {\n                    EventManager.onceSupported = true;\n                    return undefined;\n                }\n            },\n        });\n        window.addEventListener('test', empty, options);\n        window.removeEventListener('test', empty, options);\n    } catch (e) {\n    }\n})();\n\n(window as any).EventManager = EventManager;\n(window as any).ExtendedMouseEvent = ExtendedMouseEvent;\n(window as any).ExtendedTouchEvent = ExtendedTouchEvent;\n(window as any).PathDirection = PathDirection;\n(window as any).EventPosition = EventPosition;\n(window as any).EventPath = EventPath;\n(window as any).EventPathList = EventPathList;\n\ndeclare global {\n    interface Window {\n        EventManager: EventManager\n        ExtendedMouseEvent: ExtendedMouseEvent\n        ExtendedTouchEvent: ExtendedTouchEvent\n        PathDirection: PathDirection\n        EventPosition: EventPosition\n        EventPath: EventPath\n        EventPathList: EventPathList\n    }\n}","import {EventManager, ExtendedTouchEvent, ExtendedMouseEvent} from \"eventlistener-manager\";\n\nexport {};\n\nlet target1: HTMLElement = document.querySelector('.gesture')!\nconst log: HTMLElement = document.querySelector('.gesture-log')!\nconst objWrapper: HTMLElement = document.querySelector('.gesture-obj-wrapper')!\nconst obj: HTMLElement = document.querySelector('.gesture-obj')!\n\nconst c = {\n    mousepanmove: 'c1',\n    mousepanleft: 'c2',\n    mousepanright: 'c3',\n    mousepanup: 'c4',\n    mousepandown: 'c5',\n    mousepanend: 'c6',\n    mousepanleave: 'c7',\n    mouselongpressmove: 'c8',\n    mouselongpressend: 'c9',\n    mouselongpressleave: 'c10',\n    touchpanmove: 'c1',\n    touchpanleft: 'c2',\n    touchpanright: 'c3',\n    touchpanup: 'c4',\n    touchpandown: 'c5',\n    touchpanend: 'c6',\n    touchpanleave: 'c7',\n    touchlongpressmove: 'c8',\n    touchlongpressend: 'c9',\n    touchlongpressleave: 'c10',\n    touchpinchstart: 'c11',\n    touchpinchmove: 'c20',\n    touchpinchend: 'c13',\n    touchpinchcancel: 'c14',\n}\n\nconst logging = (e: Event) => {\n    const element: HTMLElement = log\n    const type: string = e.type\n\n    if (element.getAttribute('relate') === type) {\n        const divs: NodeListOf<HTMLDivElement> = element.querySelectorAll('div')\n        const div: HTMLDivElement = divs[divs.length - 1]\n        const cnt: number = parseInt(div.getAttribute('cnt') ?? '1')\n\n        div.innerHTML = type + ' ' + (cnt + 1)\n        div.setAttribute('cnt', String(cnt + 1))\n    } else {\n        element.innerHTML += '<div>' + type + '</div>'\n        element.setAttribute('relate', type)\n    }\n\n    if (e instanceof ExtendedTouchEvent || e instanceof ExtendedMouseEvent) {\n        const rect = target1.getBoundingClientRect()\n        const b = parseFloat(getComputedStyle(target1).borderWidth)\n        const mw = rect.width - 2 * b\n        const mh = rect.height - 2 * b\n        const nm: string = e.type\n\n        if (nm === 'mousepanleft' || nm === 'touchpanleft') {\n            const c = 'left' + new Date().getTime()\n            objWrapper.classList.add(c)\n            setTimeout(() => objWrapper.classList.remove(c), 1000)\n        }\n\n        if (nm === 'mousepanright' || nm === 'touchpanright') {\n            const c = 'right' + new Date().getTime()\n            objWrapper.classList.add(c)\n            setTimeout(() => objWrapper.classList.remove(c), 1000)\n        }\n\n        if (nm === 'mousepanup' || nm === 'touchpanup') {\n            const c = 'up' + new Date().getTime()\n            objWrapper.classList.add(c)\n            setTimeout(() => objWrapper.classList.remove(c), 1000)\n        }\n\n        if (nm === 'mousepandown' || nm === 'touchpandown') {\n            const c = 'down' + new Date().getTime()\n            objWrapper.classList.add(c)\n            setTimeout(() => objWrapper.classList.remove(c), 1000)\n        }\n\n        if (nm === 'touchlongpressstart' || nm === 'mouselongpressstart') {\n            objWrapper.classList.add('longpress')\n        }\n        if (nm === 'mouselongpressend' || nm === 'mouselongpressleave' || nm === 'touchlongpressend' || nm === 'touchlongpresscancel') {\n            objWrapper.classList.remove('longpress')\n        }\n\n        if (nm === 'touchpanmove' || nm === 'mousepanmove') {\n            const last = e.paths.last\n            if (last) {\n                objWrapper.style.left = Math.min(mw, Math.max(0, (parseFloat(getComputedStyle(objWrapper).left) + last.dx))) + 'px'\n                objWrapper.style.top = Math.min(mh, Math.max(0, (parseFloat(getComputedStyle(objWrapper).top) + last.dy))) + 'px'\n            }\n        }\n\n        if (nm === 'touchpinchmove') {\n            const f = e.paths.first\n            const l = e.paths.last\n            if (f && l) {\n                const scale = getComputedStyle(objWrapper).transform.match(/matrix\\(([^)]+)\\)/)?.[1].split(',')?.[0].trim()\n                if (scale) {\n                    const s = Math.min(3, Math.max(0.33, parseFloat(scale) + ((l.distance / f.distance) - 1) / 3))\n                    objWrapper.style.transform = 'matrix(' + s + ', 0, 0, ' + s + ', -25, -25)';\n                }\n            }\n\n            const dCenter = e.paths.dCenter(e.paths.length - 1)\n\n            if (dCenter) {\n                objWrapper.style.left = Math.min(mw, Math.max(0, (parseFloat(getComputedStyle(objWrapper).left) - dCenter.dx))) + 'px'\n                objWrapper.style.top = Math.min(mh, Math.max(0, (parseFloat(getComputedStyle(objWrapper).top) - dCenter.dy))) + 'px'\n            }\n\n            const dDegree = e.paths.dDegree(e.paths.length - 1)\n\n            if (dDegree) {\n                const deg = obj.style.transform.match(/rotate\\(([^)]+)deg\\)/)?.[1]\n                obj.style.transform = 'rotate(' + (Number(deg ? deg : 0) - dDegree) + 'deg)'\n            }\n        }\n        const ax = rect.x\n        const ay = rect.y\n\n        const p = nm.includes('move') ? e.paths.slice(-5) : e.paths\n\n        p.forEach(path => {\n            const type = e.type;\n            const mainColorClass = (c as any)[type] // 임의로 색상을 선택\n            const dir = (path.degree > -90 && path.degree <= -0) || (path.degree >= 90 && path.degree < 180) ? 'left' : 'right';\n\n            const line = document.createElement('div');\n            const dot1 = document.createElement('div');\n            const dot2 = document.createElement('div');\n\n            line.classList.add('line');\n            line.classList.add(mainColorClass);\n            line.classList.add(dir);\n            line.style.left = Math.min(path.start.x - 15, path.end.x - 15) - ax + 'px';\n            line.style.top = Math.min(path.start.y - 15, path.end.y - 15) - ay + 'px';\n            line.style.width = Math.max(1, Math.abs(path.dx)) + 'px';\n            line.style.height = Math.max(1, Math.abs(path.dy)) + 'px';\n            line.id = 'line-' + nm;\n\n            dot1.classList.add('dot');\n            dot1.classList.add(mainColorClass);\n            dot1.style.left = path.start.x - 15 - ax + 'px';\n            dot1.style.top = path.start.y - 15 - ay + 'px';\n            dot1.id = 'dot1-' + nm;\n\n            dot2.classList.add('dot');\n            dot2.classList.add(mainColorClass);\n            dot2.style.left = path.end.x - 15 - ax + 'px';\n            dot2.style.top = path.end.y - 15 - ay + 'px';\n            dot2.id = 'dot2-' + nm;\n\n            if (nm === 'touchpinchmove') {\n                const circle = document.createElement('div');\n                circle.classList.add('circle');\n                circle.style.left = path.center.x - 15 - ax + 'px';\n                circle.style.top = path.center.y - 15 - ay + 'px';\n                circle.style.width = path.distance / 2 + 'px';\n                circle.style.height = path.distance / 2 + 'px';\n                circle.id = 'circle-' + nm;\n                target1.appendChild(circle)\n\n                setTimeout(() => {\n                    circle.remove()\n                }, 250)\n            }\n\n            target1.appendChild(line)\n            target1.appendChild(dot1)\n            target1.appendChild(dot2)\n\n\n            setTimeout(() => {\n                line.remove()\n                dot1.remove()\n                dot2.remove()\n            }, nm.includes('move') ? 250 : 1000)\n        })\n    }\n\n    log.scrollTop = log.scrollHeight\n}\n\nconst addMouselongpress = () => EventManager.add(\n    target1,\n    [\n        'mouselongpressstart',\n        'mouselongpressend',\n        'mouselongpressmove',\n        'mouselongpressleave',\n    ],\n    logging,\n    { passive: false }\n)\n\nconst addMousepan = () => EventManager.add(\n    target1,\n    [\n        'mousepanstart',\n        'mousepanmove',\n        'mousepanleft',\n        'mousepanright',\n        'mousepanup',\n        'mousepandown',\n        'mousepanend',\n        'mousepanleave',\n    ],\n    logging,\n    { passive: false }\n)\n\nconst addTouchlongpress = () => EventManager.add(\n    target1,\n    [\n        'touchlongpressstart',\n        'touchlongpressend',\n        'touchlongpressmove',\n        'touchlongpresscancel'\n    ],\n    logging,\n    { passive: false }\n)\n\nconst addTouchpan = () => EventManager.add(\n    target1,\n    [\n        'touchpanstart',\n        'touchpanmove',\n        'touchpanleft',\n        'touchpanright',\n        'touchpanup',\n        'touchpandown',\n        'touchpanend',\n        'touchpancancel',\n    ],\n    logging,\n    { passive: false }\n)\n\nconst addTouchpinch = () => EventManager.add(\n    target1,\n    [\n        'touchpinchstart',\n        'touchpinchmove',\n        'touchpinchend',\n        'touchpinchcancel',\n    ],\n    logging,\n    { passive: false }\n)\n\nconst removeMouselongpress = () => EventManager.remove(\n    target1,\n    [\n        'mouselongpressstart',\n        'mouselongpressend',\n        'mouselongpressmove',\n        'mouselongpressleave',\n    ]\n)\n\nconst removeMousepan = () => EventManager.remove(\n    target1,\n    [\n        'mousepanstart',\n        'mousepanmove',\n        'mousepanleft',\n        'mousepanright',\n        'mousepanup',\n        'mousepandown',\n        'mousepanend',\n        'mousepanleave',\n    ]\n)\n\nconst removeTouchlongpress = () => EventManager.remove(\n    target1,\n    [\n        'touchlongpressstart',\n        'touchlongpressend',\n        'touchlongpressmove',\n        'touchlongpresscancel'\n    ]\n)\n\nconst removeTouchpan = () => EventManager.remove(\n    target1,\n    [\n        'touchpanstart',\n        'touchpanmove',\n        'touchpanleft',\n        'touchpanright',\n        'touchpanup',\n        'touchpandown',\n        'touchpanend',\n        'touchpancancel',\n    ]\n)\nconst removeTouchpinch = () => EventManager.remove(\n    target1,\n    [\n        'touchpinchstart',\n        'touchpinchmove',\n        'touchpinchend',\n        'touchpinchcancel',\n    ]\n)\n\nconst mouselongpress = document.querySelector<HTMLInputElement>('#mouselongpress')!\nconst mousepan = document.querySelector<HTMLInputElement>('#mousepan')!\nconst touchlongpress = document.querySelector<HTMLInputElement>('#touchlongpress')!\nconst touchpan = document.querySelector<HTMLInputElement>('#touchpan')!\nconst touchpinch = document.querySelector<HTMLInputElement>('#touchpinch')!\nconst strict = document.querySelector<HTMLInputElement>('#strict')!\n\nmouselongpress.onchange = e => {\n    const input = e.target as HTMLInputElement\n    if (input.checked) {\n        addMouselongpress()\n    } else {\n        removeMouselongpress()\n    }\n}\n\nmousepan.onchange = e => {\n    const input = e.target as HTMLInputElement\n    if (input.checked) {\n        addMousepan()\n    } else {\n        removeMousepan()\n    }\n}\n\ntouchlongpress.onchange = e => {\n    const input = e.target as HTMLInputElement\n    if (input.checked) {\n        addTouchlongpress()\n    } else {\n        removeTouchlongpress()\n    }\n}\n\ntouchpan.onchange = e => {\n    const input = e.target as HTMLInputElement\n    if (input.checked) {\n        addTouchpan()\n    } else {\n        removeTouchpan()\n    }\n}\n\ntouchpinch.onchange = e => {\n    const input = e.target as HTMLInputElement\n    if (input.checked) {\n        addTouchpinch()\n    } else {\n        removeTouchpinch()\n    }\n}\n\nstrict.onchange = e => {\n    const input = e.target as HTMLInputElement\n    EventManager.options.strict = input.checked\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './common/components/components/EventManager'\n\nconst root: HTMLElement | null = document.getElementById('root')\n\n// if (root) {\n//     ReactDOM.createRoot(root).render(<App/>)\n// }"],"names":["A","_class","t","withVendor","_len","arguments","length","e","Array","_key","vendors","flatMap","n","join","map","s","capitalize","replace","toUpperCase","get","polyfillEventTypeMap","o","wheel","pointerlockchange","pointerlockerror","pointercancel","pointerdown","pointerhover","pointermove","pointerout","pointerover","pointerup","lostpointercapture","gotpointercapture","fullscreenchange","fullscreenerror","transitionstart","transitionrun","transitionend","transitioncancel","animationstart","animationiteration","animationend","animationcancel","P","_class2","activePreventDefaultPinchGesture","isActivePreventDefaultPinchGesture","emptyPromise","document","addEventListener","preventDefault","passive","Promise","async","querySelectorAll","createElement","setAttribute","head","append","meta","set","forEach","getAttribute","i","splitViewportContent","joinViewportContent","setTimeout","inactivePreventDefaultPinchGesture","removeEventListener","has","Object","keys","remove","activePreventDefaultPanGesture","isActivePreventDefaultPanGesture","inactivePreventDefaultPanGesture","activePreventDefaultSelectGesture","isActivePreventDefaultSelectGesture","getStyleSheet","insertRule","inactivePreventDefaultSelectGesture","deleteRule","styleSheet","sheet","split","trim","reduce","assign","WeakMap","H","mouselongpressstart","mouselongpressmove","mouselongpressend","mouselongpressleave","mousepanstart","mousepanmove","mousepanleft","mousepanright","mousepanup","mousepandown","mousepanend","mousepanleave","touchlongpressstart","touchlongpressmove","touchlongpressend","touchlongpresscancel","touchpanstart","touchpanmove","touchpanleft","touchpanright","touchpanup","touchpandown","touchpanend","touchpancancel","touchpinchstart","touchpinchmove","touchpinchend","touchpinchcancel","b","_class3","get4Direction","R","D","L","U","Unknown","get8Direction","DR","DL","UL","UR","l","constructor","this","window","performance","now","undefined","MouseEvent","x","clientX","y","clientY","TouchEvent","touches","NaN","fromMouseEvent","fromTouchEvent","fromCoordinate","center","distance","Math","sqrt","timeDiff","abs","E","start","end","dx","dy","time","speed","radian","atan2","degree","PI","direction","equals","k","super","push","first","last","item","dPath","u","dNumber","dStart","dEnd","dCenter","dDistance","dRadian","dDegree","G","clone","paths","UIEvent","S","lastExecutionTime","scheduledTask","rafId","delayThreshold","scheduleTask","cancelAnimationFrame","executeTask","requestAnimationFrame","runScheduledTask","O","_class4","add","toArray","extendedEventKey","addExtendedEventListener","storeEventListener","addMouseLongpressEvent","addMousePanEvent","addTouchLongpressEvent","addTouchPanEvent","addTouchpinchEvent","instance","generalEventInstance","removeEventListenerFromType","next","done","c","value","h","d","matchAndRemoveListener","splice","indexOf","delete","size","v","f","M","removeExtendedEvent","removeEventListenerOne","_t$instance$generalEv","getOrCreateListenerMap","getOrCreateEventListenerEventMap","Map","getExtendedEvent","extendedEventInstance","addExtendedEvent","hasExtendedEventImplementation","_t$getExtendedEvent","clear","clearTimeout","dispatchEvent","options","mouseLongpressTimeRequired","setMouseDownState","mouseLongpressBelowDistance","strict","mousedown","mouseup","mouseleave","mousemove","r","m","a","w","T","p","Set","then","touchLongpressTimeRequired","setTouchDownState","touchLongpressBelowDistance","contextmenu","touchstart","touchend","touchcancel","touchmove","g","V","isArray","passiveSupported","onceSupported","empty","create","once","EventManager","ExtendedMouseEvent","ExtendedTouchEvent","PathDirection","EventPosition","EventPath","EventPathList","target1","querySelector","log","objWrapper","obj","touchpanleave","touchlongpressleave","logging","element","type","_div$getAttribute","divs","div","cnt","parseInt","innerHTML","String","rect","getBoundingClientRect","parseFloat","getComputedStyle","borderWidth","mw","width","mh","height","nm","Date","getTime","classList","style","left","min","max","top","_getComputedStyle$tra","_getComputedStyle$tra2","scale","transform","match","_obj$style$transform$","deg","Number","ax","ay","includes","slice","path","mainColorClass","dir","line","dot1","dot2","id","circle","appendChild","scrollTop","scrollHeight","mouselongpress","mousepan","touchlongpress","touchpan","touchpinch","onchange","target","checked","input","getElementById"],"sourceRoot":""}